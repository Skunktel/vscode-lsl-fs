{
    "Function": {
        "prefix": "function",
        "body": [
            "${name:datatype} ${2:name} (${3:augments})",
            "{",
            "\t$0",
            "}"
        ],
        "description": "Function"
    },
    "Function-Void": {
        "prefix": "voidfunction",
        "body": [
            "${name:name} (${2:augments})",
            "{",
            "\t$0",
            "}"
        ],
        "description": "Function Void"
    },
    "llSetPrimitiveParams": {
        "prefix": "llSetPrimitiveParams",
        "body": [
           "llSetPrimitiveParams(${name:rules});$0"
        ],
        "description": "llSetPrimitiveParams( list rules );\n\n 259 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nSets the prim's parameters according to rules.\n• list rules\nPlease consider using llSetLinkPrimitiveParamsFast in combination with LINK_THIS instead. You avoid the 0.2 second delay.\nAlthough it might not seem obvious you actually can set link rules using this function in combination with PRIM_LINK_TARGET, however for your own sake please use llSetLinkPrimitiveParams or llSetLinkPrimitiveParamsFast instead.\n"
    },
    "llSetLinkPrimitiveParams": {
        "prefix": "llSetLinkPrimitiveParams",
        "body": [
           "llSetLinkPrimitiveParamsFast(${1|LINK_ROOT,LINK_SET,LINK_ALL_OTHERS,LINK_ALL_CHILDREN,LINK_THIS|}, ${name:rules});$0"
        ],
        "description": "llSetLinkPrimitiveParams( integer link, list rules );\n\n 328 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nSets the prim's parameters according to rules.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag\n• list rules\nPlease consider using llSetLinkPrimitiveParamsFast instead. You avoid the 0.2 second delay.\n"
    },
    "llSetLinkPrimitiveParamsFast": {
        "prefix": "llSetLinkPrimitiveParamsFast",
        "body": [
           "llSetLinkPrimitiveParamsFast(${1|LINK_ROOT,LINK_SET,LINK_ALL_OTHERS,LINK_ALL_CHILDREN,LINK_THIS|}, ${name:rules});$0"
        ],
        "description": "llSetLinkPrimitiveParamsFast( integer link, list rules );\n\n 353 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the prim's parameters according to rules.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag\n• list rules\nThis function is fast compared to the above variations, not other LSL functions.\n\nCaveats\nSometimes llSetLinkPrimitiveParamsFast is too fast, i.e. the function returns and the next line of code executes & returns before the update has been processed, resulting in the updates being out of order. In most situations, there is no difference in behavior but sometimes there is. In those cases, you need to use llSetPrimitiveParams or llSetLinkPrimitiveParams.\nThis occurs because the llSetLinkPrimitiveParamsFast payload is being executed asynchronously, while llSetPrimitiveParams and llSetLinkPrimitiveParams payloads are executed synchronously (or the delay makes it appear synchronous).\n"
    },
    "llGetPrimitiveParams": {
        "prefix": "llGetPrimitiveParams",
        "body": [
           "llGetPrimitiveParams(${name:list params}$0)"
        ],
        "description": "llGetPrimitiveParams( list params );\n\n 279 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nReturns attribute values (a list) for the attributes requested in the params list.\n• list params – PRIM_* flags\nIf you are planning to use PRIM_LINK_TARGET consider using llGetLinkPrimitiveParams instead.\n\nCaveats\nThis function causes the script to sleep for 0.2 seconds.\nlink needs to be either an actual link number or a link constants that equate to a single prim, such as LINK_ROOT and LINK_THIS.\nLINK_SET, LINK_ALL_CHILDREN and LINK_ALL_OTHERS will not work.\n"
    },
    "llGetLinkPrimitiveParams": {
        "prefix": "llGetLinkPrimitiveParams",
        "body": [
           "llGetLinkPrimitiveParams(${1|LINK_ROOT,LINK_SET,LINK_ALL_OTHERS,LINK_ALL_CHILDREN,LINK_THIS|}, ${name:params}$0)"
        ],
        "description": "llGetLinkPrimitiveParams( integer link, list params );\n\n 354 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nIdentical to llGetPrimitiveParams except that it acts on the prim specified by the link number given.\nReturns attribute values (a list) for the attributes requested in the params list for the link.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag to get the parameters of\n• list params – PRIM_* flagsPRIM_* flags\n"
    },
    "llParticleSystem": {
        "prefix": "llParticleSystem",
        "body": [
           "llParticleSystem(${name:list rules}$0)"
        ],
        "description": "llParticleSystem( list rules );\n\n 229 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nDefines a particle system for the containing prim based on a list of rules.\n• list rules – Particle system rules list in the format [ rule1, data1, rule2, data2 . . . rulen, datan ]\n"
    },
    "llLinkParticleSystem": {
        "prefix": "llLinkParticleSystem",
        "body": [
           "llLinkParticleSystem(${1|LINK_ROOT,LINK_SET,LINK_ALL_OTHERS,LINK_ALL_CHILDREN,LINK_THIS|}, ${name:rules}$0)"
        ],
        "description": "llLinkParticleSystem( integer link, list rules );\n\n 229 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nA particle system defined by a list of rules is set for the prim(s) link.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag\n• list rules – Particle system rules list in the format [ rule1, data1, rule2, data2 . . . rulen, datan ]\n"
    },


    "llApplyRotationalImpulse": {
        "prefix": "llApplyRotationalImpulse",
        "body": [
           "llApplyRotationalImpulse(${name:force},${2:local});$0"
        ],
        "description": "llApplyRotationalImpulse( vector force, integer local );\n\n 73 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nApplies rotational impulse to object.\n• vector force\n• integer local – boolean, if TRUE force is treated as a local directional vector, if FALSE force is treated as a region directional vector\n"
    },
    "llAgentInExperience": {
        "prefix": "llAgentInExperience",
        "body": [
           "llAgentInExperience(${name:agent}$0)"
        ],
        "description": "integer llAgentInExperience( key agent );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nDetermines whether or not the specified agent is in the script's experience.Returns a boolean (an integer) that is TRUE if the agent is in the experience and the experience can run in the current region.\n• key agent – avatar UUID that is in the same region to query.\n"
    },
    "llBase64ToString": {
        "prefix": "llBase64ToString",
        "body": [
           "llBase64ToString(${name:str}$0)"
        ],
        "description": "string llBase64ToString( string str );\n\n 261 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the Base64 str decoded into a conventional string.\n• string str – Base64 string\n"
    },
    "llCeil": {
        "prefix": "llCeil",
        "body": [
           "llCeil(${name:val}$0)"
        ],
        "description": "integer llCeil( float val );\n\n 10 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the integer value of val rounded towards positive infinity (return >= val).\n• float val – Any valid float value\n"
    },
    "llDetectedPos": {
        "prefix": "llDetectedPos",
        "body": [
           "llDetectedPos(${name:number}$0)"
        ],
        "description": "vector llDetectedPos( integer number );\n\n 35 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the position (in region coordinates) of detected object number.\n• integer number – Index of detection information\nnumber does not support negative indexes.\nReturns <0.0, 0.0, 0.0> if number is not valid sensed object.\n"
    },
    "llExecCharacterCmd": {
        "prefix": "llExecCharacterCmd",
        "body": [
           "llExecCharacterCmd(${1:command}, ${name:options});$0"
        ],
        "description": "llExecCharacterCmd( integer command, list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nSend a command to the pathing system.\n• integer command – Command to be sent.\n• list options – CHARACTER_CMD_*\nCurrently only supports stopping the current pathfinding operation or causing the character to jump.\n"
    },
    "llCloseRemoteDataChannel": {
        "prefix": "llCloseRemoteDataChannel",
        "body": [
           "llCloseRemoteDataChannel(${name:channel});$0"
        ],
        "description": "llCloseRemoteDataChannel( key channel );\n\n 257 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nCloses XML-RPC channel.\n• key channel\n"
    },
    "llFleeFrom": {
        "prefix": "llFleeFrom",
        "body": [
           "llFleeFrom(${name:position}, ${name:distance}, ${name:options});$0"
        ],
        "description": "llFleeFrom( vector position, float distance, list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nDirects a character to keep a specific distance from a specific position in the region or adjacent regions.\n• vector position – position in region coordinates from which to flee.\n• float distance – Distance in meters to flee from position.\n• list options – No options available at this time.\n"
    },
    "llDetectedKey": {
        "prefix": "llDetectedKey",
        "body": [
           "llDetectedKey(${name:number}$0)"
        ],
        "description": "key llDetectedKey( integer number );\n\n 32 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a key that is the UUID of the detected object or avatar number.\n• integer number – Index of detection information\nnumber does not support negative indexes.\nReturns an empty key if number does not correspond to a valid sensed object or avatar.\n"
    },
    "llGetRegionSunRotation": {
        "prefix": "llGetRegionSunRotation",
        "body": [
           "llGetRegionSunRotation($0)"
        ],
        "description": "rotation llGetRegionSunRotation( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturn the rotation applied to the sun for the region at the location of the object containing the script. These functions are altitude aware and so will pick up the sun for their current track. llGetRegionSunRotation returns the rotation applied at the region level, llGetSunRotation does the same for the parcel. If there is no custom environment applied to parcel llGetSunRotation returns the same value as llGetRegionSunRotation.Returns a rotation "
    },
    "llGetRegionMoonRotation": {
        "prefix": "llGetRegionMoonRotation",
        "body": [
           "llGetRegionMoonRotation($0)"
        ],
        "description": "rotation llGetRegionMoonRotation( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturn the rotation applied to the moon for the region at the location of the object containing the script. These function are altitude aware and so will pick up the moon for their current track. llGetRegionMoonRotation returns the rotation applied at the region level, llGetMoonRotation does the same for the parcel. If there is no custom environment applied to parcel llGetMoonRotation returns the same value as llGetRegionMoonRotation.Returns a rotation "
    },
    "llAvatarOnSitTarget": {
        "prefix": "llAvatarOnSitTarget",
        "body": [
           "llAvatarOnSitTarget($0)"
        ],
        "description": "key llAvatarOnSitTarget( );\n\n 239 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a key that is the UUID of the user seated on the prim.If the prim lacks a sit target or there is no avatar sitting on the prim, then NULL_KEY is returned.\n"
    },
    "llDetectedRot": {
        "prefix": "llDetectedRot",
        "body": [
           "llDetectedRot(${name:number}$0)"
        ],
        "description": "rotation llDetectedRot( integer number );\n\n 38 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the rotation of detected object number.\n• integer number – Index of detection information\nnumber does not support negative indexes.\nReturns <0.0, 0.0, 0.0, 1.0> if number is not valid sensed object.\n"
    },
    "llGetRegionCorner": {
        "prefix": "llGetRegionCorner",
        "body": [
           "llGetRegionCorner($0)"
        ],
        "description": "vector llGetRegionCorner( );\n\n 199 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector in meters that is the global location of the south-west corner of the region the object is in. The z component is 0.0Divide the returned value by 256 to get the region offset.\n"
    },
    "llGetPos": {
        "prefix": "llGetPos",
        "body": [
           "llGetPos($0)"
        ],
        "description": "vector llGetPos( );\n\n 59 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the vector position of the task in region coordinates"
    },
    "llGetRegionDayLength": {
        "prefix": "llGetRegionDayLength",
        "body": [
           "llGetRegionDayLength($0)"
        ],
        "description": "integer llGetRegionDayLength( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturn the number of seconds in the day cycle applied to the current region. llGetDayLength returns the number of seconds for the current parcel, llGetRegionDayLength is the number of seconds in the day cycle applied to the entire region.Returns an integer "
    },
    "llDetectedTouchFace": {
        "prefix": "llDetectedTouchFace",
        "body": [
           "llDetectedTouchFace(${name:index}$0)"
        ],
        "description": "integer llDetectedTouchFace( integer index );\n\n 338 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the index of the face the avatar clicked on.\n• integer index – Index of detection information\nindex does not support negative indexes.\nFor the touch category of events only. The prim that was touched may not be the prim receiving the event, use llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace to determine which face was touched.\n"
    },
    "llGetGeometricCenter": {
        "prefix": "llGetGeometricCenter",
        "body": [
           "llGetGeometricCenter($0)"
        ],
        "description": "vector llGetGeometricCenter( );\n\n 278 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the vector that is the geometric center of the object relative to the root prim."
    },
    "llGetGMTclock": {
        "prefix": "llGetGMTclock",
        "body": [
           "llGetGMTclock($0)"
        ],
        "description": "float llGetGMTclock( );\n\n 282 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the time in seconds since midnight GMT. Value appears to be truncated to the second.For SL time, which is the same as California time, use llGetWallclock\n"
    },
    "llGetAttachedList": {
        "prefix": "llGetAttachedList",
        "body": [
           "llGetAttachedList(${name:avatar}$0)"
        ],
        "description": "list llGetAttachedList( key avatar );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a list of object keys corresponding to public attachments worn by an avatar.\n• key avatar – avatar UUID that is in the same region\nBy design HUD attachment keys are not reported by this function. \nIf avatar is a child agent, [\"NOT ON REGION\"] is returned.\nIf avatar is not a main agent and not a child agent or not an agent at all, [\"NOT FOUND\"] is returned.\n"
    },
    "llGenerateKey": {
        "prefix": "llGenerateKey",
        "body": [
           "llGenerateKey($0)"
        ],
        "description": "key llGenerateKey( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nGenerates a key using Version 5 (SHA-1 hash) UUID generation to create a unique key.Returns the key generated."
    },
    "llGetColor": {
        "prefix": "llGetColor",
        "body": [
           "llGetColor(${name:face}$0)"
        ],
        "description": "vector llGetColor( integer face );\n\n 52 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the color on face.\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function returns the average color of all the faces on the prim."
    },
    "llDetectedType": {
        "prefix": "llDetectedType",
        "body": [
           "llDetectedType(${name:number}$0)"
        ],
        "description": "integer llDetectedType( integer number );\n\n 34 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer mask that is the types of detected object or avatar.\n• integer number – Index of detection information\nnumber does not support negative indexes.\nReturns zero if number is not valid sensed object or avatar.\n"
    },
    "llAddToLandPassList": {
        "prefix": "llAddToLandPassList",
        "body": [
           "llAddToLandPassList(${name:avatar}, ${name:hours});$0"
        ],
        "description": "llAddToLandPassList( key avatar, float hours );\n\n 240 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nAdd avatar to the land pass list for hours, or indefinitely if hours is zero.\n• key avatar – avatar UUID\n• float hours – range [0.0, 144.0]\n"
    },
    "llClearLinkMedia": {
        "prefix": "llClearLinkMedia",
        "body": [
           "llClearLinkMedia(${1:|LINK_ROOT,LINK_SET,LINK_ALL_OTHERS,LINK_ALL_CHILDREN,LINK_THIS|}, ${name:face}$0)"
        ],
        "description": "integer llClearLinkMedia( integer link, integer face );\n\n ? Function ID\n 0.0 Forced Delay\n 0.0 Energy\n\nClears (deletes) the media and all params from the given face on the linked prim(s).Returns a status (an integer) that is a STATUS_* flag which details the success/failure of the operation.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag \n• integer face – face number\n"
    },
    "llCollisionSprite": {
        "prefix": "llCollisionSprite",
        "body": [
           "llCollisionSprite(${name:impact_sprite});$0"
        ],
        "description": "llCollisionSprite( string impact_sprite );\n\n 161 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSuppress default collision sprites, replace default impact sprite with impact_sprite\n• string impact_sprite – a texture in the inventory of the prim this script is in, a UUID of a texture or an empty string\nTo suppress the collision sprite all together, just use an empty string as the value for impact_sprite\n"
    },
    "llStopSound": {
        "prefix": "llStopSound",
        "body": [
           "llStopSound();$0"
        ],
        "description": "llStopSound( );\n\n 92 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nStops the attached sound(s) currently playing, if they were started by llLoopSound"
    },
    "llEvade": {
        "prefix": "llEvade",
        "body": [
           "llEvade(${name:target}, ${name:options});$0"
        ],
        "description": "llEvade( key target, list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nCharacters will (roughly) try to hide from their pursuers if there is a good hiding spot along their fleeing path. Hiding means no direct line of sight from the head of the character (center of the top of its physics bounding box) to the head of its pursuer and no direct path between the two on the navmesh.\n• key target – group, avatar or object UUID to evade\n• list options – No options currently available\n"
    },
    "llGetForce": {
        "prefix": "llGetForce",
        "body": [
           "llGetForce($0)"
        ],
        "description": "vector llGetForce( );\n\n 65 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the force (if the script is physical)"
    },
    "llAngleBetween": {
        "prefix": "llAngleBetween",
        "body": [
           "llAngleBetween(${name:a}, ${name:b}$0)"
        ],
        "description": "float llAngleBetween( rotation a, rotation b );\n\n 174 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the angle in radians between rotation a and rotation b.\n• rotation a – start rotation\n• rotation b – end rotation\n"
    },
    "llGetAgentList": {
        "prefix": "llGetAgentList",
        "body": [
           "llGetAgentList(${name:scope}, ${name:options}$0)"
        ],
        "description": "list llGetAgentList( integer scope, list options );\n\n ? Function ID\n 0 Forced Delay\n 0 Energy\n\nRequests a list of agents currently in the region, limited by the scope parameter.Returns a list [key id0, key id1, ..., key idn] or [string error_msg] - returns avatar keys for all agents in the region limited to the area(s) specified by scope\n• integer scope – \n AGENT_LIST_* flag specifies the selection scope\n AGENT_LIST_PARCEL - returns only agents on the same parcel where the script is running. AGENT_LIST_PARCEL_OWNER - returns only agents on any parcel in the region where the parcel owner is the same as the owner of the parcel under the scripted object. AGENT_LIST_REGION - returns any/all agents in the region.• list options – Unused.\n"
    },
    "llGetFreeMemory": {
        "prefix": "llGetFreeMemory",
        "body": [
           "llGetFreeMemory($0)"
        ],
        "description": "integer llGetFreeMemory( );\n\n 225 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the integer of the number of free bytes of memory the script can use."
    },
    "llGetEnvironment": {
        "prefix": "llGetEnvironment",
        "body": [
           "llGetEnvironment(${name:pos}, ${name:params}$0)"
        ],
        "description": "list llGetEnvironment( vector pos, list params );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a list containing the current environment values for the parcel and region as a list of attributes. Takes a list of attributes to retrieve in params and returns them in the order requested.\n• vector pos – A position in region coordinates. X and Y are in region coordinates and determine the parcel. If X and Y are both -1, the environment for the region is inspected. Z is the altitude in the region and determines which sky track is accessed.\n• list params – A list of parameters to retrieve from the current environment.\nIf an unknown rule is encountered in the parameter list an error is sent to the debug channel.\n"
    },
    "llSetDamage": {
        "prefix": "llSetDamage",
        "body": [
           "llSetDamage(${name:damage});$0"
        ],
        "description": "llSetDamage( float damage );\n\n 157 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the amount of damage that will be done when this object hits an avatar.\n• float damage – range: 0.0 (no damage) ~ 100.0 (instant kill)\n"
    },
    "llGetClosestNavPoint": {
        "prefix": "llGetClosestNavPoint",
        "body": [
           "llGetClosestNavPoint(${name:point}, ${name:options}$0)"
        ],
        "description": "list llGetClosestNavPoint( vector point, list options );\n\n ? Function ID\n 1 Forced Delay\n  Energy\n\nUsed to get a point on the navmesh that is the closest point to point.Returns a list containing a single vector which is the closest point on the navmesh to the point provided or an empty list.\n• vector point – A point in region-local space\n• list options – GCNP_* and other flags with their parameters. See options tableIf an option is not explicitly set, the default value for that option is used."
    },
    "llSetForce": {
        "prefix": "llSetForce",
        "body": [
           "llSetForce(${name:force}, ${name:local});$0"
        ],
        "description": "llSetForce( vector force, integer local );\n\n 64 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nApplies force to the object (if the script is physical)\n• vector force – directional force\n• integer local – boolean, if TRUE force is treated as a local directional vector, if FALSE force is treated as a region directional vector\nContinuous force. llApplyImpulse has instantaneous push.\n"
    },
    "llSetColor": {
        "prefix": "llSetColor",
        "body": [
           "llSetColor(${name:color}, ${2|integer face,ALL_SIDES|});$0"
        ],
        "description": "llSetColor( vector color, integer face );\n\n 49 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the color on face of the prim.\n• vector color – color in RGB <R, G, B> (<0.0, 0.0, 0.0> = black, <1.0, 1.0, 1.0> = white)\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llSetForceAndTorque": {
        "prefix": "llSetForceAndTorque",
        "body": [
           "llSetForceAndTorque(${name:force}, ${name:torque}, ${name:local});$0"
        ],
        "description": "llSetForceAndTorque( vector force, vector torque, integer local );\n\n 76 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the force and torque of object (if the script is physical)\n• vector force – directional force\n• vector torque – torque force\n• integer local – boolean, if TRUE force is treated as a local directional vector, if FALSE force is treated as a region directional vector\n"
    },
    "llGetListEntryType": {
        "prefix": "llGetListEntryType",
        "body": [
           "llGetListEntryType(${name:src}, ${name:index}$0)"
        ],
        "description": "integer llGetListEntryType( list src, integer index );\n\n 194 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the type (an integer) of the entry at index in src.\n• list src – List containing the element of interest.\n• integer index – Index of the element of interest.\nindex supports negative indexes.\nIf index describes a location not in src then TYPE_INVALID is returned."
    },
    "llGetAlpha": {
        "prefix": "llGetAlpha",
        "body": [
           "llGetAlpha(${name:face}$0)"
        ],
        "description": "float llGetAlpha( integer face );\n\n 50 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the alpha of face.\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function returns the sum of alpha of all the faces on the prim, range [0, sides].\nOtherwise the return is in the range [0, 1], with 0.0 being fully transparent and 1.0 being fully solid.\n"
    },
    "llApplyImpulse": {
        "prefix": "llApplyImpulse",
        "body": [
           "llApplyImpulse(${name:momentum}, ${name:local});$0"
        ],
        "description": "llApplyImpulse( vector momentum, integer local );\n\n 72 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nApplies impulse to object\n• vector momentum\n• integer local – boolean, if TRUE momentum is treated as a local directional vector, if FALSE momentum is treated as a region directional vector\nInstantaneous impulse. llSetForce has continuous push. \"Instantaneous\" seems to mean a one second impulse, as an application of a force (in newtons) equal to the object's mass (in kg) for one second will accelerate it to a velocity of 1 (in meters per second), which appears to be what happens with this function.\n"
    },
    "llOpenRemoteDataChannel": {
        "prefix": "llOpenRemoteDataChannel",
        "body": [
           "llOpenRemoteDataChannel();$0"
        ],
        "description": "llOpenRemoteDataChannel( );\n\n 254 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nCreates a channel to listen for XML-RPC calls. Will trigger a remote_data event with channel id once it is available."
    },
    "llGetDayLength": {
        "prefix": "llGetDayLength",
        "body": [
           "llGetDayLength($0)"
        ],
        "description": "integer llGetDayLength( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturn the number of seconds in the day cycle applied to the current parcel. llGetDayLength returns the number of seconds for the current parcel, llGetRegionDayLength is the number of seconds in the day cycle applied to the entire region.Returns an integer "
    },
    "llGetCameraRot": {
        "prefix": "llGetCameraRot",
        "body": [
           "llGetCameraRot($0)"
        ],
        "description": "rotation llGetCameraRot( );\n\n 304 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a rotation that is the current camera orientation for the agent the task has permissions for.\nTo run this function the script must request the PERMISSION_TRACK_CAMERA permission with llRequestPermissions."
    },
    "llGetEnv": {
        "prefix": "llGetEnv",
        "body": [
           "llGetEnv(${name:name}$0)"
        ],
        "description": "string llGetEnv( string name );\n\n 362 Function ID\n 0.0 Forced Delay\n 0.0 Energy\n\nReturns a string with the requested data about the region.\n• string name – The name of the data to request\nNote that the value returned is a string, you may need to cast it to an integer for use in calculations.\n"
    },
    "llGetRegionMoonDirection": {
        "prefix": "llGetRegionMoonDirection",
        "body": [
           "llGetRegionMoonDirection($0)"
        ],
        "description": "vector llGetRegionMoonDirection( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a normalized vector to the current moon position at the location of object containing the script. llGetMoonDirection is the vector to the parcel's moon, llGetRegionMoonDirection is the vector to region's moon. If there is no custom environment set for the current parcel llGetMoonDirection returns the direction to the region's moon. These functions are altitude aware.Returns a vector "
    },
    "llGetAnimationList": {
        "prefix": "llGetAnimationList",
        "body": [
           "llGetAnimationList(${name:avatar}$0)"
        ],
        "description": "list llGetAnimationList( key avatar );\n\n 266 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list of keys of playing animations for avatar.\n• key avatar – avatar UUID that is in the same region\n"
    },
    "llGetLandOwnerAt": {
        "prefix": "llGetLandOwnerAt",
        "body": [
           "llGetLandOwnerAt(${name:pos}$0)"
        ],
        "description": "key llGetLandOwnerAt( vector pos );\n\n 216 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a key that is the land owner at pos.\n• vector pos – region coordinate\n"
    },
    "llGetCameraPos": {
        "prefix": "llGetCameraPos",
        "body": [
           "llGetCameraPos($0)"
        ],
        "description": "vector llGetCameraPos( );\n\n 303 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the current camera position for the agent the task has permissions for.\nTo run this function the script must request the PERMISSION_TRACK_CAMERA permission with llRequestPermissions."
    },
    "llSetCameraEyeOffset": {
        "prefix": "llSetCameraEyeOffset",
        "body": [
           "llSetCameraEyeOffset(${name:offset});$0"
        ],
        "description": "llSetCameraEyeOffset( vector offset );\n\n 243 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the camera eye offset for avatars that sit on the object.\n• vector offset – offset relative to the prim's position and expressed in local coordinates\nThis is the position of the camera's eye, not the point it looks at.\n"
    },
    "llTakeControls": {
        "prefix": "llTakeControls",
        "body": [
           "llTakeControls(${1|CONTROL_FWD,CONTROL_BACK,CONTROL_LEFT,CONTROL_RIGHT,CONTROL_ROT_LEFT,CONTROL_ROT_RIGHT,CONTROL_UP,CONTROL_DOWN,CONTROL_LBUTTON,CONTROL_ML_LBUTTON|}, ${2|integer accept,TRUE,FALSE|}, ${3|integer pass_on,TRUE,FALSE|});$0"
        ],
        "description": "llTakeControls( integer controls, integer accept, integer pass_on );\n\n 111 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nAllows for intercepting of keyboard and mouse clicks, specifically those specified by controls, from the agent the script has permissions for.\n• integer controls – bitfield of CONTROL_* flags\n• integer accept – boolean, determines whether control events are generated\n• integer pass_on – boolean, determines whether controls perform their normal functionsTo run this function the script must request the PERMISSION_TAKE_CONTROLS permission with llRequestPermissions.\nIf accept is FALSE and pass_on is FALSE, the behavior is not intuitive. In this case, the complement of the specified controls do not generate events and do not perform their normal functions. They are effectively disabled. Certain control bits (e.g. CONTROL_ROT_LEFT) are also disabled when specified, in this case.\nIf accept is FALSE and pass_on is TRUE, then the specified controls do not generate events but perform their normal functions.\nIf accept is TRUE and pass_on is FALSE, then the specified controls generate events but do not perform their normal functions.\nIf accept is TRUE and pass_on is TRUE, then the specified controls generate events and perform their normal functions.\n"
    },
    "llTargetRemove": {
        "prefix": "llTargetRemove",
        "body": [
           "llTargetRemove(${name:handle});$0"
        ],
        "description": "llTargetRemove( integer handle );\n\n 67 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRemoves positional target handle registered with llTarget\n• integer handle – handle to control at_target and not_at_target events\n"
    },
    "llRefreshPrimURL": {
        "prefix": "llRefreshPrimURL",
        "body": [
           "llRefreshPrimURL();$0"
        ],
        "description": "llRefreshPrimURL( );\n\n 306 Function ID\n 20.0 Forced Delay\n 10.0 Energy\n\nReloads the web page shown on the sides of the object.This functions currently does nothing.\n"
    },
    "llPlaySound": {
        "prefix": "llPlaySound",
        "body": [
           "llPlaySound(${name:sound}, ${name:volume});$0"
        ],
        "description": "llPlaySound( string sound, float volume );\n\n 86 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPlays attached sound once at volume\n• string sound – a sound in the inventory of the prim this script is in or a UUID of a sound\n• float volume – between 0.0 (silent) and 1.0 (loud) (0.0 <= volume <= 1.0)\n"
    },
    "llInstantMessage": {
        "prefix": "llInstantMessage",
        "body": [
           "llInstantMessage(${name:user}, ${name:message});$0"
        ],
        "description": "llInstantMessage( key user, string message );\n\n 118 Function ID\n 2.0 Forced Delay\n 10.0 Energy\n\nSends an Instant Message specified in the string message to the user specified by user.\n• key user – avatar UUID\n• string message – message to be transmittedTo send a message directly to an object, use llRegionSayTo."
    },
    "llGetUsedMemory": {
        "prefix": "llGetUsedMemory",
        "body": [
           "llGetUsedMemory($0)"
        ],
        "description": "integer llGetUsedMemory( );\n\n ??? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the integer of the number of bytes of memory currently in use by the script."
    },
    "llParcelMediaQuery": {
        "prefix": "llParcelMediaQuery",
        "body": [
           "llParcelMediaQuery(${name:query}$0)"
        ],
        "description": "list llParcelMediaQuery( list query );\n\n 299 Function ID\n 2.0 Forced Delay\n 10.0 Energy\n\nReturns a list containing results of query. The results are in the same order as the request.\n• list query\n"
    },
    "llJsonGetValue": {
        "prefix": "llJsonGetValue",
        "body": [
           "llJsonGetValue(${name:json}, ${name:specifiers}$0)"
        ],
        "description": "string llJsonGetValue( string json, list specifiers );\n\n ? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nGets the value indicated by specifiers from the json string.Returns a string made by parsing json, a string representing json and traversing as specified by specifiers.\n• string json\n• list specifiers\nWhen the input is invalid or no result can be found this function returns JSON_INVALID. If the result is null the function returns JSON_NULL.\n"
    },
    "llGround": {
        "prefix": "llGround",
        "body": [
           "llGround(${name:offset}$0)"
        ],
        "description": "float llGround( vector offset );\n\n 42 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the ground height directly below the prim position + offset\n• vector offset – offset relative to the prim's position and expressed in local coordinates\nThe requested position needs to be in the same region.\nOnly the x and y coordinates in offset are important, the z component is ignored."
    },
    "llMoveToTarget": {
        "prefix": "llMoveToTarget",
        "body": [
           "llMoveToTarget(${name:target}, ${name:tau});$0"
        ],
        "description": "llMoveToTarget( vector target, float tau );\n\n 70 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nCritically damp to target in tau seconds (if the script is physical)\n• vector target – position in region coordinates\n• float tau – seconds to critically damp in\nTo stop the object from maintaining the target positions use llStopMoveToTarget\nTo change the rotation in the same manner use llLookAt or llRotLookAt.\n"
    },
    "llGetRegionFPS": {
        "prefix": "llGetRegionFPS",
        "body": [
           "llGetRegionFPS($0)"
        ],
        "description": "float llGetRegionFPS( );\n\n 228 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the mean region frames per second."
    },
    "llStringTrim": {
        "prefix": "llStringTrim",
        "body": [
           "llStringTrim(${name:src}, ${2|integer type,STRING_TRIM_HEAD,STRING_TRIM_TAIL,STRING_TRIM|}$0)"
        ],
        "description": "string llStringTrim( string src, integer type );\n\n 330 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is src with leading and/or trailing white space (spaces, tabs, and line feeds) trimmed from it.\n• string src\n• integer type – STRING_TRIM* flag(s)\n"
    },
    "llGetScriptName": {
        "prefix": "llGetScriptName",
        "body": [
           "llGetScriptName($0)"
        ],
        "description": "string llGetScriptName( );\n\n 167 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the name of the script that called this function."
    },
    "llGetRegionTimeDilation": {
        "prefix": "llGetRegionTimeDilation",
        "body": [
           "llGetRegionTimeDilation($0)"
        ],
        "description": "float llGetRegionTimeDilation( );\n\n 227 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the current time dilation, the value range is [0.0, 1.0], 0.0 (full dilation) and 1.0 (no dilation).It is used as the ratio between the change of script time to that of real world time.\n"
    },
    "llGetRegionSunDirection": {
        "prefix": "llGetRegionSunDirection",
        "body": [
           "llGetRegionSunDirection($0)"
        ],
        "description": "vector llGetRegionSunDirection( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a normalized vector to the current sun position at the location of object containing the script. llGetSunDirection is the vector to the parcel's sun, llGetRegionSunDirection is the vector to region's sun. If there is no custom environment set for the current parcel llGetSunDirection returns the direction to the region's sun. These functions are altitude aware.Returns a vector "
    },
    "llGetBoundingBox": {
        "prefix": "llGetBoundingBox",
        "body": [
           "llGetBoundingBox(${name:object}$0)"
        ],
        "description": "list llGetBoundingBox( key object );\n\n 277 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list that is the bounding box of object relative to its root prim, in local coordinates.Format: [ (vector) min_corner, (vector) max_corner ]\n• key object – group, avatar or prim UUID that is in the same region\nThe bounding box is for the entire link set, not just the requested prim.Returns an empty list ([]) if object is not found.\n"
    },
    "llGetRootRotation": {
        "prefix": "llGetRootRotation",
        "body": [
           "llGetRootRotation($0)"
        ],
        "description": "rotation llGetRootRotation( );\n\n 269 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a rotation that is the region rotation of the root prim of the object."
    },
    "llGetMass": {
        "prefix": "llGetMass",
        "body": [
           "llGetMass($0)"
        ],
        "description": "float llGetMass( );\n\n 109 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the mass of object (in Lindograms) that script is attached to."
    },
    "llGetInventoryCreator": {
        "prefix": "llGetInventoryCreator",
        "body": [
           "llGetInventoryCreator(${name:item}$0)"
        ],
        "description": "key llGetInventoryCreator( string item );\n\n 291 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a key of the creator of the inventory item.\n• string item – an item in the inventory of the prim this script is in\n"
    },
    "llName2Key": {
        "prefix": "llName2Key",
        "body": [
           "llName2Key(${name:name}$0)"
        ],
        "description": "key llName2Key( string name );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a key the Agent ID for the named agent in the region. If there is no agent with the specified name currently signed onto the region, this function returns the value NULL_KEY. Names are always provided in the form \"First[ Last]\" or \"first[.last]\" (first name with an optional last name.) If the last name is omitted a last name of \"Resident\" is assumed. Case is not considered when resolving agent names.\n• string name – Name of the avatar to retrieve the UUID of.\n"
    },
    "llGetObjectMass": {
        "prefix": "llGetObjectMass",
        "body": [
           "llGetObjectMass(${name:id}$0)"
        ],
        "description": "float llGetObjectMass( key id );\n\n 295 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the mass of id\n• key id – group, avatar or object UUID that is in the same region\n"
    },
    "llGetAnimation": {
        "prefix": "llGetAnimation",
        "body": [
           "llGetAnimation(${name:id}$0)"
        ],
        "description": "string llGetAnimation( key id );\n\n 162 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the name of the currently playing locomotion animation for avatar id. See the table below.\n• key id – avatar UUID that is in the same region\nllGetAgentInfo provides information on some animation states not covered by this function (typing, away, busy). llGetAnimationList provides more detailed information about the running animations, but may not reflect avatar state as accurately as llGetAnimation.\n"
    },
    "llGetStaticPath": {
        "prefix": "llGetStaticPath",
        "body": [
           "llGetStaticPath(${name:start}, ${name:end}, ${name:radius}, ${name:params}$0)"
        ],
        "description": "list llGetStaticPath( vector start, vector end, float radius, list params );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a list of position vectors indicating pathfinding waypoints between positions at start and end, for a character of a given radius. The waypoints this function returns are for the 'static' nav mesh, meaning that objects set to \"movable obstacle\" or \"movable phantom\" are ignored.\nThis function can be used from attachments and other non-character objects. It can also be used in any region, even if dynamic pathfinding is disabled.\n• vector start – Starting position\n• vector end – End position\n• float radius – Radius of the character that we're creating a path for, between 0.125m and 5.0m\n• list params – Only takes the parameter CHARACTER_TYPE; the options are identical to those used for llCreateCharacter. The default value is CHARACTER_TYPE_NONE\nThe list also always contains an integer in the last element, which is a status code indicating the outcome of the path query:\n If llGetStaticPath() finds a path, it will return waypoint vectors and will return a status code of 0, for success If llGetStaticPath() cannot find a path for some reason, it only returns the status code, indicating the sort of error. The error codes correspond to the constants in path_update (e.g. PU_FAILURE_INVALID_START is returned if the start vector is not near the nav mesh)\n"
    },
    "llGetAttached": {
        "prefix": "llGetAttached",
        "body": [
           "llGetAttached($0)"
        ],
        "description": "integer llGetAttached( );\n\n 224 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the attach_point (an integer) the object is attached to or zero if it is either not attached or is pending detachment."
    },
    "llAcos": {
        "prefix": "llAcos",
        "body": [
           "llAcos(${name:val}$0)"
        ],
        "description": "float llAcos( float val );\n\n 172 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the arccosine in radians of val\n• float val – must fall in the range [-1.0, 1.0]\nThe returned value is in the range [0.0, PI]\n"
    },
    "llGetObjectPrimCount": {
        "prefix": "llGetObjectPrimCount",
        "body": [
           "llGetObjectPrimCount(${name:prim}$0)"
        ],
        "description": "integer llGetObjectPrimCount( key prim );\n\n 323 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the total number of prims in the object that contains prim.\n• key prim – prim UUID that is in the same region\nAvatars sitting on the object are not counted. Zero is returned if prim: (A) is not found, (B) is part of an attachment, or (C) is not a prim.\n"
    },
    "llGetScriptState": {
        "prefix": "llGetScriptState",
        "body": [
           "llGetScriptState(${name:script}$0)"
        ],
        "description": "integer llGetScriptState( string script );\n\n 250 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a boolean (an integer) that is TRUE if the script is running.\n• string script – a script in the inventory of the prim this script is in\n"
    },
    "llGetStartParameter": {
        "prefix": "llGetStartParameter",
        "body": [
           "llGetStartParameter($0)"
        ],
        "description": "integer llGetStartParameter( );\n\n 134 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the script start/rez parameter.If the script was loaded with llRemoteLoadScriptPin then that start parameter is returned.If the containing object was rezzed by llRezObject or llRezAtRoot then the return is the on_rez parameter.If the containing object was manually rezzed, by dragging from inventory, the start parameter is 0.\n"
    },
    "llEdgeOfWorld": {
        "prefix": "llEdgeOfWorld",
        "body": [
           "llEdgeOfWorld(${name:pos}, ${name:dir}$0)"
        ],
        "description": "integer llEdgeOfWorld( vector pos, vector dir );\n\n 205 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nChecks to see whether the border hit by dir from pos is the edge of the world (has no neighboring simulator).Returns a boolean (an integer) value. FALSE indicating there is a simulator in the direction indicated.\n• vector pos – position in region coordinates\n• vector dir – direction\nThe z component of dir is ignored.\n"
    },
    "llTeleportAgentGlobalCoords": {
        "prefix": "llTeleportAgentGlobalCoords",
        "body": [
           "llTeleportAgentGlobalCoords(${name:agent}, ${name:global_coordinates}, ${name:region_coordinates}, ${name:look_at});$0"
        ],
        "description": "llTeleportAgentGlobalCoords( key agent, vector global_coordinates, vector region_coordinates, vector look_at );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nTeleports an agent to set of a region_coordinates within a region at the specified global_coordinates. The agent lands facing the direction defined by look_at. A region's global coordinates can be retrieved using llRequestSimulatorData(region_name, DATA_SIM_POS)\n• key agent – avatar UUID that is in the same region (avatar to be teleported)\n• vector global_coordinates – Global coordinates of the destination region. Can be retrieved by using llRequestSimulatorData(region_name, DATA_SIM_POS).\n• vector region_coordinates – position in region coordinates where the avatar should land.\n• vector look_at – direction the avatar should be facing on landing (east, west, etc).To run this function the script must request the PERMISSION_TELEPORT permission with llRequestPermissions and it must be granted by agent.\nThe combination of llRequestSimulatorData and llTeleportAgentGlobalCoords allows agents to be teleported to regions by region name.\n"
    },
    "llGetTorque": {
        "prefix": "llGetTorque",
        "body": [
           "llGetTorque($0)"
        ],
        "description": "vector llGetTorque( );\n\n 75 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the torque (if the script is physical)"
    },
    "llGetObjectDetails": {
        "prefix": "llGetObjectDetails",
        "body": [
           "llGetObjectDetails(${name:id}, ${name:params}$0)"
        ],
        "description": "list llGetObjectDetails( key id, list params );\n\n 332 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list of the details for id, specifically those requested in params.\n• key id – group, avatar or prim UUID that is in the same region or adjacent regions*\n• list params – OBJECT_* flags\nAn empty list if id is not found.\nOBJECT_UNKNOWN_DETAIL is returned when passed an invalid integer parameter.\n"
    },
    "llPointAt": {
        "prefix": "llPointAt",
        "body": [
           "llPointAt(${name:pos});$0"
        ],
        "description": "llPointAt( vector pos );\n\n 131 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nMake agent that owns object point at pos\n• vector pos\n"
    },
    "llParseString2List": {
        "prefix": "llParseString2List",
        "body": [
           "llParseString2List(${name:src}, ${name:separators}, ${name:spacers}$0)"
        ],
        "description": "list llParseString2List( string src, list separators, list spacers );\n\n 214 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list that is src broken into a list of strings, discarding separators, keeping spacers, discards any null (empty string) values generated.\n• string src – source string\n• list separators – separators to be discarded\n• list spacers – spacers to be kept\nIn most situations llParseStringKeepNulls should be used instead. Discarding null values is rarely desired.\n"
    },
    "llRequestAgentData": {
        "prefix": "llRequestAgentData",
        "body": [
           "llRequestAgentData(${name:id}, ${name:data}$0)"
        ],
        "description": "key llRequestAgentData( key id, integer data );\n\n 155 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nRequests data about agent id. When data is available the dataserver event will be raisedReturns the handle (a key) for the dataserver event when it is raised.\n• key id – avatar UUID\n• integer data – DATA_* flag\n"
    },
    "llReleaseCamera": {
        "prefix": "llReleaseCamera",
        "body": [
           "llReleaseCamera(${name:avatar});$0"
        ],
        "description": "llReleaseCamera( key avatar );\n\n 116 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nThis function is recognized by the compiler, but was never implemented in Second Life.\n• key avatar – avatar UUID that is in the same region\n"
    },
    "llRemoteLoadScriptPin": {
        "prefix": "llRemoteLoadScriptPin",
        "body": [
           "llRemoteLoadScriptPin(${name:target}, ${name:name}, ${name:pin}, ${name:running}, ${name:start_param});$0"
        ],
        "description": "llRemoteLoadScriptPin( key target, string name, integer pin, integer running, integer start_param );\n\n 253 Function ID\n 3.0 Forced Delay\n 10.0 Energy\n\nCopy script name into target and set to running with a start_param only if target's pin matches pin\n• key target – prim UUID that is in the same region\n• string name – a script in the inventory of the prim this script is in\n• integer pin – Must match pin set by llSetRemoteScriptAccessPin\n• integer running – boolean, if TRUE the script is set as running, if FALSE the script is not set as running\n• integer start_param – value returned by llGetStartParameter in the target script.\nOnly works if the script owner can modify target.\n"
    },
    "llGetObjectDesc": {
        "prefix": "llGetObjectDesc",
        "body": [
           "llGetObjectDesc($0)"
        ],
        "description": "string llGetObjectDesc( );\n\n 270 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string containing the description of the prim the script is attached to.To get the object's description (not the current prim's), use PRIM_DESC or OBJECT_DESC.\n"
    },
    "llReleaseURL": {
        "prefix": "llReleaseURL",
        "body": [
           "llReleaseURL(${name:url});$0"
        ],
        "description": "llReleaseURL( string url );\n\n 347 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReleases the specified URL, it will no longer be usable.\n• string url – URL to release\n"
    },
    "llGetAgentLanguage": {
        "prefix": "llGetAgentLanguage",
        "body": [
           "llGetAgentLanguage(${name:avatar}$0)"
        ],
        "description": "string llGetAgentLanguage( key avatar );\n\n 336 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the language code of the preferred interface language of the user avatar.\n• key avatar – avatar UUID that is in the same region\n"
    },
    "llGetInventoryNumber": {
        "prefix": "llGetInventoryNumber",
        "body": [
           "llGetInventoryNumber(${name:type}$0)"
        ],
        "description": "integer llGetInventoryNumber( integer type );\n\n 146 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the number of items of a given type in the prims inventory.\n• integer type – INVENTORY_* flag\n"
    },
    "llSetParcelMusicURL": {
        "prefix": "llSetParcelMusicURL",
        "body": [
           "llSetParcelMusicURL(${name:url});$0"
        ],
        "description": "llSetParcelMusicURL( string url );\n\n 267 Function ID\n 2.0 Forced Delay\n 10.0 Energy\n\nSets the streaming audio URL for the parcel object is on\n• string url\nThe object owner must also be the land owner. If the land is deeded to a group the object will need to be deeded to the same group for this function to work.\n"
    },
    "llGetPrimMediaParams": {
        "prefix": "llGetPrimMediaParams",
        "body": [
           "llGetPrimMediaParams(${name:face}, ${name:params}$0)"
        ],
        "description": "list llGetPrimMediaParams( integer face, list params );\n\n 351 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nGet the media params for a particular face on an object, given the desired list of names.Returns a parameter list (a list) of values in the order requested.\n• integer face – face number\n• list params – a set of name (in no particular order)Returns an empty list if no media exists on the face.\n"
    },
    "llGetKey": {
        "prefix": "llGetKey",
        "body": [
           "llGetKey($0)"
        ],
        "description": "key llGetKey( );\n\n 121 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the key of the prim the script is in."
    },
    "llGetRegionFlags": {
        "prefix": "llGetRegionFlags",
        "body": [
           "llGetRegionFlags($0)"
        ],
        "description": "integer llGetRegionFlags( );\n\n 318 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the region flags (REGION_FLAG_*) for the region the object is in.Only a small number of flags are actually used; the rest (shown below in strike-through) are always zero. In particular, it is not possible to detect the status of \"Allow Land Resell\", \"Allow Land Join/Divide\", or \"Block Land Show in Search\"; nor, obviously, it is possible for a script to detect that \"Disable Scripts\" has been set.\n"
    },
    "llIntegerToBase64": {
        "prefix": "llIntegerToBase64",
        "body": [
           "llIntegerToBase64(${name:number}$0)"
        ],
        "description": "string llIntegerToBase64( integer number );\n\n 280 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is a Base64 big endian encode of number\n• integer number\n"
    },
    "llSetAlpha": {
        "prefix": "llSetAlpha",
        "body": [
           "llSetAlpha(${name:alpha}, ${2|integer face,ALL_SIDES|});$0"
        ],
        "description": "llSetAlpha( float alpha, integer face );\n\n 51 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the alpha on face\n• float alpha – from 0.0 (clear) to 1.0 (solid) (0.0 <= alpha <= 1.0)\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llGetAnimationOverride": {
        "prefix": "llGetAnimationOverride",
        "body": [
           "llGetAnimationOverride(${name:anim_state}$0)"
        ],
        "description": "string llGetAnimationOverride( string anim_state );\n\n ? Function ID\n 0.0 Forced Delay\n ? Energy\n\nReturns a string that is the name of the animation that is being used for the specified animation state (anim_state).\n• string anim_state – animation stateTo run this function the script must request the PERMISSION_OVERRIDE_ANIMATIONS or PERMISSION_TRIGGER_ANIMATION permission with llRequestPermissions."
    },
    "llDumpList2String": {
        "prefix": "llDumpList2String",
        "body": [
           "llDumpList2String(${name:src}, ${name:separator}$0)"
        ],
        "description": "string llDumpList2String( list src, string separator );\n\n 245 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the list src converted to a string with separator between the entries.\n• list src\n• string separator\nUse llParseString2List or llParseStringKeepNulls to undo the process.\nUnlike llList2CSV, which dumps a list to a comma-separated formatted string with no choice over the separator, llDumpList2String gives you more control. This can be useful if you don't trust commas as a separator because you might be working with data supplied to the script by a user who uses, say, commas as part of a street address.\n"
    },
    "llJsonSetValue": {
        "prefix": "llJsonSetValue",
        "body": [
           "llJsonSetValue(${name:json}, ${name:specifiers}, ${name:value}$0)"
        ],
        "description": "string llJsonSetValue( string json, list specifiers, string value );\n\n ? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns, if successful, a new JSON text string which is json with the value indicated by the specifiers list set to value.\nIf unsuccessful (usually because of specifying an out of range array index) it returns JSON_INVALID.\nAn \"out of range array index\" is defined to be any Integer specifiers greater than the length of an existing array at that level within the Json text or greater than 0 (zero) at a level an array doesn't exist.\nA special specifiers, JSON_APPEND, is accepted which appends the value to the end of the array at the specifiers level. Care should be taken- if that level is not an array, the existing Value there will be overwritten and replaced with an array containing value at it's first (0) index.\nContrary to lists and strings, negative indexing of Json arrays is not supported.\nIf an existing \"Key\" is specifiers at that level, its Value will be overwritten by value unless value is the magic value JSON_DELETE. If a value does not exist at specifiers, a new Key:Value pair will be formed within the Json object. \nTo delete an existing value at specifiers, use JSON_DELETE as the value. Note it will not prune empty objects or arrays at higher levels.\nIf value is JSON_TRUE, JSON_FALSE or JSON_NULL, the Value set will be the bare words 'true', 'false' or 'null', respectively, at the specifiers location within json.Returns a string \n• string json – source JSON data\n• list specifiers – location of the of the value to be added, updated or deleted.\n• string value – new value or JSON_DELETE flag.\nspecifiers does not support negative indexes."
    },
    "llEmail": {
        "prefix": "llEmail",
        "body": [
           "llEmail(${name:address}, ${name:subject}, ${name:message});$0"
        ],
        "description": "llEmail( string address, string subject, string message );\n\n 119 Function ID\n 20.0 Forced Delay\n 10.0 Energy\n\nSends an email to address with subject and message.\n• string address\n• string subject\n• string message\nThe entire message (including the address, subject and other miscellaneous fields) can't be longer than 4096 bytes combined.\n"
    },
    "llInsertString": {
        "prefix": "llInsertString",
        "body": [
           "llInsertString(${name:dst}, ${name:pos}, ${name:src}$0)"
        ],
        "description": "string llInsertString( string dst, integer pos, string src );\n\n 96 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the string dst with src inserted starting at pos.\n• string dst – destination of insertion\n• integer pos – position index for insert, first is 0\n• string src – source string to be inserted\npos does not support negative indexes.\ni.e. unlike other somewhat similar string functions such as llGetSubString and llDeleteSubString, you cannot use -1 for the counting with this function. You may use instead the function provided a bit further below.\n"
    },
    "llGetMaxScaleFactor": {
        "prefix": "llGetMaxScaleFactor",
        "body": [
           "llGetMaxScaleFactor($0)"
        ],
        "description": "float llGetMaxScaleFactor( );\n\n ? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the largest scaling factor that can be used with llScaleByFactor to resize the object. This maximum is determined by the Linkability Rules and prim scale limits."
    },
    "llGetListLength": {
        "prefix": "llGetListLength",
        "body": [
           "llGetListLength(${name:src}$0)"
        ],
        "description": "integer llGetListLength( list src );\n\n 185 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the number of elements in the list src.\n• list src\n"
    },
    "llGiveInventory": {
        "prefix": "llGiveInventory",
        "body": [
           "llGiveInventory(${name:destination}, ${name:inventory});$0"
        ],
        "description": "llGiveInventory( key destination, string inventory );\n\n 150 Function ID\n 0.0* Forced Delay\n 10.0 Energy\n\nGive inventory to destination.\n• key destination – group, avatar or prim UUID\n• string inventory – an item in the inventory of the prim this script is in\nIf destination is an object then it must be in the same region.If destination is an avatar they do not have to be in the same region.\n"
    },
    "llForceMouselook": {
        "prefix": "llForceMouselook",
        "body": [
           "llForceMouselook(${1|TRUE,FALSE|});$0"
        ],
        "description": "llForceMouselook( integer mouselook );\n\n 294 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets if a sitting avatar should be forced into mouselook when they sit on this prim.\n• integer mouselook – boolean, if TRUE when an avatar sits on the prim, the avatar will be forced into mouselook mode, if FALSE (default) the avatar will keep their current camera mode.\nA sit target is not necessary for this function to work.\n"
    },
    "llGetRegionDayOffset": {
        "prefix": "llGetRegionDayOffset",
        "body": [
           "llGetRegionDayOffset($0)"
        ],
        "description": "integer llGetRegionDayOffset( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturn the number of seconds added to the current time before calculating the current environmental time for the region. llGetDayOffset returns the value for the current parcel, llGetRegionDayOffset produces the same value for the entire region.Returns an integer "
    },
    "llGetMemoryLimit": {
        "prefix": "llGetMemoryLimit",
        "body": [
           "llGetMemoryLimit($0)"
        ],
        "description": "integer llGetMemoryLimit( );\n\n ??? Function ID\n 0.0 Forced Delay\n ??? Energy\n\nGet the maximum memory a script can use.Returns the integer amount of memory the script can use in bytes."
    },
    "llGetTextureRot": {
        "prefix": "llGetTextureRot",
        "body": [
           "llGetTextureRot(${name:face}$0)"
        ],
        "description": "float llGetTextureRot( integer face );\n\n 180 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the texture rotation, expressed as an angle, on face\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llUnescapeURL": {
        "prefix": "llUnescapeURL",
        "body": [
           "llUnescapeURL(${name:url}$0)"
        ],
        "description": "string llUnescapeURL( string url );\n\n 308 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is an unescaped/unencoded version of url, replacing \"%20\" with spaces etc.\n• string url – A (preferably valid and escaped URL) string.\n This function is similar to functions (e.g. urldecode, decodeURIComponent) found in many other languages:  PHP urldecode ECMAScript decodeURIComponent\n"
    },
    "llGetNotecardLine": {
        "prefix": "llGetNotecardLine",
        "body": [
           "llGetNotecardLine(${name:name}, ${name:line}$0)"
        ],
        "description": "key llGetNotecardLine( string name, integer line );\n\n 217 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nRequests the line line of the notecard name from the dataserver.Returns the handle (a key) for a dataserver event response.\n• string name – a notecard in the inventory of the prim this script is in or a UUID of a notecard\n• integer line – Line number in a notecard (the index starts at zero).\nline does not support negative indexes.\nIf line is past the end of the notecard EOF is returned by the dataserver.\n"
    },
    "llGetCenterOfMass": {
        "prefix": "llGetCenterOfMass",
        "body": [
           "llGetCenterOfMass($0)"
        ],
        "description": "vector llGetCenterOfMass( );\n\n 183 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the vector position of the object's center of mass in region coordinates.If called from a child prim, the child's center of mass is returned instead (but still in region coordinates).\n"
    },
    "llFrand": {
        "prefix": "llFrand",
        "body": [
           "llFrand(${name:mag}$0)"
        ],
        "description": "float llFrand( float mag );\n\n 8 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is pseudo random in the range [0.0, mag) or (mag, 0.0]. This means that the returned value can be any value in the range 0.0 to mag including 0.0, but not including the value of mag itself. The sign of mag matches the return.\n• float mag – Any valid float valueWhen converting the float to an integer, be sure to use an integer typecast (integer) and not one of the rounding functions (llRound, llFloor, llCeil). The integer typecast is the only method guaranteed not to skew the distribution of integer values."
    },
    "llGetTimeOfDay": {
        "prefix": "llGetTimeOfDay",
        "body": [
           "llGetTimeOfDay($0)"
        ],
        "description": "float llGetTimeOfDay( );\n\n 80 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the time in seconds with subsecond precision since Second Life midnight or region up-time (time since when the region was brought online/rebooted); whichever is smaller. If the region is configured so the sun stays in a constant position, then the returned value is the region up-time.Second Life days cycles are 4 hours long (3 hours of light, 1 hour of dark). The sunrise and sunset time varies slowly.\n"
    },
    "llGetSubString": {
        "prefix": "llGetSubString",
        "body": [
           "llGetSubString(${name:src}, ${name:start}, ${name:end}$0)"
        ],
        "description": "string llGetSubString( string src, integer start, integer end );\n\n 94 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the substring of src from start to end, leaving the original string intact.\n• string src\n• integer start – start index\n• integer end – end index\nstart & end support negative indexes."
    },
    "llRemoteDataReply": {
        "prefix": "llRemoteDataReply",
        "body": [
           "llRemoteDataReply(${name:channel}, ${name:message_id}, ${name:sdata}, ${name:idata});$0"
        ],
        "description": "llRemoteDataReply( key channel, key message_id, string sdata, integer idata );\n\n 256 Function ID\n 3.0 Forced Delay\n 10.0 Energy\n\nSend an XML-RPC reply on channel to message_id with payload of string sdata and integer idata\n• key channel\n• key message_id\n• string sdata\n• integer idata\n"
    },
    "llRemoteLoadScript": {
        "prefix": "llRemoteLoadScript",
        "body": [
           "llRemoteLoadScript(DEPRACATED, Avoid Using This);$0"
        ],
        "description": "llRemoteLoadScript( key target, string name, integer running, integer start_param );\n\n 251 Function ID\n 3.0 Forced Delay\n 10.0 Energy\n\nDeprecated\n• key target – prim UUID that is in the same region\n• string name – a script in the inventory of the prim this script is in\n• integer running\n• integer start_param\n"
    },
    "llRemoteDataSetRegion": {
        "prefix": "llRemoteDataSetRegion",
        "body": [
           "llRemoteDataSetRegion();$0"
        ],
        "description": "llRemoteDataSetRegion( );\n\n 263 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nUsed with XML-RPC. If an object using remote data channels changes regions, you must call this function to reregister the remote data channels.This call is not needed if the prim does not change regions.\n"
    },
    "llTriggerSoundLimited": {
        "prefix": "llTriggerSoundLimited",
        "body": [
           "llTriggerSoundLimited(${name:sound}, ${name:volume}, ${name:top_north_east}, ${name:bottom_south_west});$0"
        ],
        "description": "llTriggerSoundLimited( string sound, float volume, vector top_north_east, vector bottom_south_west );\n\n 212 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPlays sound at volume, centered at but not attached to the object, limited to the box defined by vectors top_north_east and bottom_south_west\n• string sound – a sound in the inventory of the prim this script is in or a UUID of a sound\n• float volume – between 0.0 (silent) and 1.0 (loud) (0.0 <= volume <= 1.0)\n• vector top_north_east – position in region coordinates\n• vector bottom_south_west – position in region coordinates\nIf the object moves the sound does not move with it.Use llPlaySound to play a sound attached to the object.\n"
    },
    "llSetPrimMediaParams": {
        "prefix": "llSetPrimMediaParams",
        "body": [
           "llSetPrimMediaParams(${1|integer face,ALL_SIDES|}, ${name:params}$0)"
        ],
        "description": "integer llSetPrimMediaParams( integer face, list params );\n\n 350 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nSet the media params for a particular face.Returns a status (an integer) that is a STATUS_* flag which details the success/failure of the operation(s).\n• integer face – face number\n• list params – a set of name/value pairs (in no particular order)\n"
    },
    "llGetInventoryName": {
        "prefix": "llGetInventoryName",
        "body": [
           "llGetInventoryName(${1|INVENTORY_ALL,INVENTORY_TEXTURE,INVENTORY_SOUND,INVENTORY_LANDMARK,INVENTORY_CLOTHING,INVENTORY_OBJECT,INVENTORY_NOTECARD,INVENTORY_SCRIPT,INVENTORY_BODYPART,INVENTORY_ANIMATION,INVENTORY_GESTURE,INVENTORY_SETTING|}, ${name:number}$0)"
        ],
        "description": "string llGetInventoryName( integer type, integer number );\n\n 147 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the name of the inventory item number of type. Returns an empty string if no item of the specified type is found in the prim's inventory (or there are less than or equal to number items of the type).\n• integer type – INVENTORY_* flag\n• integer number – Beginning from 0\nnumber does not support negative indexes.\nInventory items are sorted in alphabetical order (not chronological order).\n"
    },
    "llGetAccel": {
        "prefix": "llGetAccel",
        "body": [
           "llGetAccel($0)"
        ],
        "description": "vector llGetAccel( );\n\n 78 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the acceleration of the object in the region frame of reference."
    },
    "llSetKeyframedMotion": {
        "prefix": "llSetKeyframedMotion",
        "body": [
           "llSetKeyframedMotion(${name:keyframes}, ${name:options});$0"
        ],
        "description": "llSetKeyframedMotion( list keyframes, list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nSpecify a list of times, positions, and orientations to be followed by an object. The object will be smoothly moved between keyframes by the simulator. Collisions with other nonphysical or keyframed objects will be ignored (no script events will fire and collision processing will not occur). Collisions with physical objects will be computed and reported, but the keyframed object will be unaffected by those collisions. (The physical object will be affected, however.)\n• list keyframes – Strided keyframe list of the form: vector position (optional via KFM_TRANSLATION and KFM_DATA) rotation orientation (optional via KFM_ROTATION and KFM_DATA) float time\nEach keyframe is interpreted relative to the previous transform of the object. For example, consider the following list of keyframes: [<0, 0, 10>, ZERO_ROTATION, 5, <0, 0, 0>, ZERO_ROTATION, 5, <0, 0, -10>, ZERO_ROTATION, 5]. This would cause the object to move up 10m over the course of 5s. It would then remain at the location for 5s before moving down 10m over the course of another 5s.\nTime values must be 1/9s. or greater.\nLinear and angular velocities will be clamped to limits set by the simulator (values TBD).\nAn empty list will terminate any keyframed animation currently playing.• list options – modifiers and future options\n"
    },
    "llKeysKeyValue": {
        "prefix": "llKeysKeyValue",
        "body": [
           "llKeysKeyValue(${name:first}, ${name:count}$0)"
        ],
        "description": "key llKeysKeyValue( integer first, integer count );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nStart an asynchronous transaction to request a number of keys from the script's Experience.Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed.\n• integer first – Zero-based index of the first key to retrieve\n• integer count – Number of keys to retriever\nThis function will attempt to retrieve the number of keys requested but may return less if there are not enough to fulfill the full amount requested or if the list is too large. The length of the returned list is limited to 4097 characters (the success flag \"1\" and 4096 characters). The order keys are returned is not guaranteed but is stable between subsequent calls as long as no keys are added or removed.\nThe error XP_ERROR_KEY_NOT_FOUND is returned if there index given is greater than or equal to the number of keys.For this function to work, the script must be compiled into an Experience."
    },
    "llKey2Name": {
        "prefix": "llKey2Name",
        "body": [
           "llKey2Name(${name:id}$0)"
        ],
        "description": "string llKey2Name( key id );\n\n 210 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the legacy name of the prim or avatar specified by id.\n• key id – group, avatar or prim UUID that is in the same region\nid must specify a valid rezzed prim or avatar key, present in or otherwise known to the sim in which the script is running, otherwise an empty string is returned. In the case of an avatar, this function will still return a valid name if the avatar is a child agent of the sim (i.e., in an adjacent sim, but presently able to see into the one the script is in), or for a short period after the avatar leaves the sim (specifically, when the client completely disconnects from the sim, either as a main or child agent).\nKeys of inventory items will not work; in the case of these, use llGetInventoryName instead.\nAlthough the function description claims id can be a group key, in practice using a group key with this function always returns an empty string.\n"
    },
    "llGodLikeRezObject": {
        "prefix": "llGodLikeRezObject",
        "body": [
           "llGodLikeRezObject(${name:inventory}, ${name:pos});$0"
        ],
        "description": "llGodLikeRezObject( key inventory, vector pos );\n\n 135 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRez directly off of UUID if owner has god-bit set.\n• key inventory\n• vector pos – position in region coordinates\n"
    },
    "llSetPos": {
        "prefix": "llSetPos",
        "body": [
           "llSetPos(${name:pos});$0"
        ],
        "description": "llSetPos( vector pos );\n\n 58 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nMoves the object or primitive towards pos without using physics.\n• vector pos – position in region or local coordinates depending upon the situation (see #Specification).\nMovement is capped to 10m per call for unattached root prims.\n"
    },
    "llSetPhysicsMaterial": {
        "prefix": "llSetPhysicsMaterial",
        "body": [
           "llSetPhysicsMaterial(${name:mask}, ${name:gravity_multiplier}, ${name:restitution}, ${name:friction}, ${name:density});$0"
        ],
        "description": "llSetPhysicsMaterial( integer mask, float gravity_multiplier, float restitution, float friction, float density );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nUsed to set the physical characteristics of an object.\n• integer mask – bitwise combination of DENSITY, FRICTION, RESTITUTION, and GRAVITY_MULTIPLIER and specifies which floats to actually apply\n• float gravity_multiplier – range [-1.0, +28.0], default: 1.0\n• float restitution – range [0.0, 1.0], default: [0.3, 0.9] \n• float friction – range [0.0, 255.0], default: [0.2, 0.9]\n• float density – range [1.0, 22587.0] kg/m^3, default: 1000.0\nThe default values for friction and restitution depend upon the material type."
    },
    "llList2Key": {
        "prefix": "llList2Key",
        "body": [
           "llList2Key(${name:src}, ${name:index}$0)"
        ],
        "description": "key llList2Key( list src, integer index );\n\n 189 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a key that is at index in src.\n• list src – List containing the element of interest.\n• integer index – Index of the element of interest.\nindex supports negative indexes.\nIf index describes a location not in src then null string is returned.\nIf the type of the element at index in src is not a key it is typecast to a key. If it cannot be typecast null string is returned.\n  \n   \n   Important: Please read this intro of how to iterate over a list in LSL.\n  "
    },
    "llList2Float": {
        "prefix": "llList2Float",
        "body": [
           "llList2Float(${name:src}, ${name:index}$0)"
        ],
        "description": "float llList2Float( list src, integer index );\n\n 187 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is at index in src.\n• list src – List containing the element of interest.\n• integer index – Index of the element of interest.\nindex supports negative indexes.\nIf index describes a location not in src then zero is returned.\nIf the type of the element at index in src is not a float it is typecast to a float. If it cannot be typecast zero is returned.\n  \n   \n   Important: Please read this intro of how to iterate over a list in LSL.\n  "
    },
    "llGetRot": {
        "prefix": "llGetRot",
        "body": [
           "llGetRot($0)"
        ],
        "description": "rotation llGetRot( );\n\n 62 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a rotation that is the prim's rotation relative to the region's axes."
    },
    "llGetLinkName": {
        "prefix": "llGetLinkName",
        "body": [
           "llGetLinkName(${name:link}$0)"
        ],
        "description": "string llGetLinkName( integer link );\n\n 145 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the name of link in link set\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag \n"
    },
    "llGetEnergy": {
        "prefix": "llGetEnergy",
        "body": [
           "llGetEnergy($0)"
        ],
        "description": "float llGetEnergy( );\n\n 149 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is how much energy is in the object as a percentage of maximum"
    },
    "llGetAgentInfo": {
        "prefix": "llGetAgentInfo",
        "body": [
           "llGetAgentInfo(${name:id}$0)"
        ],
        "description": "integer llGetAgentInfo( key id );\n\n 206 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a bit field (an integer) containing the agent information about id.\n• key id – avatar UUID that is in the same region\n"
    },
    "llSetLinkColor": {
        "prefix": "llSetLinkColor",
        "body": [
           "llSetLinkColor(${1|integer link,LINK_ROOT,LINK_SET,LINK_ALL_OTHERS,LINK_ALL_CHILDREN,LINK_THIS|}, ${name:color}, ${3|integer face,ALL_SIDES|});$0"
        ],
        "description": "llSetLinkColor( integer link, vector color, integer face );\n\n 140 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nIf a prim exists in the link set at link, set color on face of that prim.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag \n• vector color – color in RGB <R, G, B> (<0.0, 0.0, 0.0> = black, <1.0, 1.0, 1.0> = white)\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llSetLinkCamera": {
        "prefix": "llSetLinkCamera",
        "body": [
           "llSetLinkCamera(${name:link}, ${name:eye}, ${name:at});$0"
        ],
        "description": "llSetLinkCamera( integer link, vector eye, vector at );\n\n ? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the camera eye offset, and the offset that camera is looking at, for avatars that sit on the linked prim.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag \n• vector eye – offset relative to the prim's position and expressed in local coordinates\n• vector at – offset relative to the prim's position and expressed in local coordinates\n"
    },
    "llGetSunRotation": {
        "prefix": "llGetSunRotation",
        "body": [
           "llGetSunRotation($0)"
        ],
        "description": "rotation llGetSunRotation( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturn the rotation applied to the sun for the parcel at the location of the object containing the script. These function are altitude aware and so will pick up the sun for their current track. llGetRegionSunRotation returns the rotation applied at the region level, llGetSunRotation does the same for the parcel. If there is no custom environment applied to parcel llGetSunRotation returns the same value as llGetRegionSunRotation.Returns a rotation "
    },
    "llRemoveInventory": {
        "prefix": "llRemoveInventory",
        "body": [
           "llRemoveInventory(${name:item});$0"
        ],
        "description": "llRemoveInventory( string item );\n\n 151 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRemove the named inventory item\n• string item – an item in the inventory of the prim this script is in\n"
    },
    "llSetContentType": {
        "prefix": "llSetContentType",
        "body": [
           "llSetContentType(${name:request_id}, ${2|CONTENT_TYPE_TEXT,CONTENT_TYPE_HTML,CONTENT_TYPE_XML,CONTENT_TYPE_XHTML,CONTENT_TYPE_ATOM,CONTENT_TYPE_JSON,CONTENT_TYPE_LLSD,CONTENT_TYPE_FORM,CONTENT_TYPE_RSS|});$0"
        ],
        "description": "llSetContentType( key request_id, integer content_type );\n\n ? Function ID\n  Forced Delay\n ? Energy\n\nSets the Internet media type \"Content-Type\" header of any subsequent LSL HTTP server response via llHTTPResponse.\n• key request_id – a valid http_request() key\n• integer content_type – Media type to use with any following llHTTPResponse(request_id, ...)\n"
    },
    "llSetObjectDesc": {
        "prefix": "llSetObjectDesc",
        "body": [
           "llSetObjectDesc(${name:description});$0"
        ],
        "description": "llSetObjectDesc( string description );\n\n 271 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the prims description\n• string description\n"
    },
    "llSetLinkAlpha": {
        "prefix": "llSetLinkAlpha",
        "body": [
           "llSetLinkAlpha(${1|integer link,LINK_ROOT,LINK_SET,LINK_ALL_OTHERS,LINK_ALL_CHILDREN,LINK_THIS|}, ${name:alpha}, ${3|integer face,ALL_SIDES|});$0"
        ],
        "description": "llSetLinkAlpha( integer link, float alpha, integer face );\n\n 274 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nIf a prim exists in the link set at link, set alpha on face of that prim.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag \n• float alpha – from 0.0 (clear) to 1.0 (solid) (0.0 <= alpha <= 1.0)\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llVecMag": {
        "prefix": "llVecMag",
        "body": [
           "llVecMag(${name:vec}$0)"
        ],
        "description": "float llVecMag( vector vec );\n\n 12 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the magnitude of the vector (the undirected non-negative distance from vec to <0.0, 0.0, 0.0>).\n• vector vec\n"
    },
    "llSetInventoryPermMask": {
        "prefix": "llSetInventoryPermMask",
        "body": [
           "llSetInventoryPermMask(${1|string item,God Mode Function|}, ${2|integer category,God Mode Function|}, ${3|integer value,God Mode Function|});$0"
        ],
        "description": "llSetInventoryPermMask( string item, integer category, integer value );\n\n 290 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the given permission category to the new value on the inventory item.\n• string item – an item in the inventory of the prim this script is in\n• integer category – MASK_* flag\n• integer value – Permission bit field (PERM_* flags)\n"
    },
    "llXorBase64StringsCorrect": {
        "prefix": "llXorBase64StringsCorrect",
        "body": [
           "llXorBase64StringsCorrect(DEPRACATED, Avoid Use$0)"
        ],
        "description": "string llXorBase64StringsCorrect( string str1, string str2 );\n\n 319 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nCorrectly performs an exclusive or on two Base 64 strings.Returns a string that is a Base64 XOR of str1 and str2.\n• string str1 – Base64 string\n• string str2 – Base64 string\nstr2 repeats if it is shorter than str1. If the inputs are not Base64 strings the result will be erratic.\n"
    },
    "llWhisper": {
        "prefix": "llWhisper",
        "body": [
           "llWhisper(${name:channel}, ${name:msg});$0"
        ],
        "description": "llWhisper( integer channel, string msg );\n\n 22 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nWhispers the text supplied in string msg on channel supplied in integer channel.\n• integer channel – output chat channel, any integer value\n• string msg – message to be transmitted\n"
    },
    "llToLower": {
        "prefix": "llToLower",
        "body": [
           "llToLower(${name:src}$0)"
        ],
        "description": "string llToLower( string src );\n\n 98 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is src with all lower-case letters\n• string src\nThe opposite is llToUpper.\n"
    },
    "llUnSit": {
        "prefix": "llUnSit",
        "body": [
           "llUnSit(${name:id});$0"
        ],
        "description": "llUnSit( key id );\n\n 220 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nThe agent identified by id is forced to stand up if any of the following apply:\n The agent is sitting on the scripted object The agent is over land owned by the scripted object's owner and/or a group the owner has land rights for.• key id – avatar UUID that is in the same region\n"
    },
    "llRequestInventoryData": {
        "prefix": "llRequestInventoryData",
        "body": [
           "llRequestInventoryData(${name:name}$0)"
        ],
        "description": "key llRequestInventoryData( string name );\n\n 156 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nRequests data about the item name in the prim's inventory. When data is available the dataserver event will be raised.Returns the handle (a key) that is used to identify the dataserver event when it is raised.\n• string name – an item in the inventory of the prim this script is in\n"
    },
    "llWater": {
        "prefix": "llWater",
        "body": [
           "llWater(${name:offset}$0)"
        ],
        "description": "float llWater( vector offset );\n\n 153 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the water height below the prim's position + offset\n• vector offset – offset relative to the prim's position and expressed in local coordinates\nThe requested position needs to be in the same region.\nOnly the x and y coordinates in offset are important, the z component is ignored.\nWater height is constant across each entire sim and is typically 20 meters but not always.\n"
    },
    "llLinkSitTarget": {
        "prefix": "llLinkSitTarget",
        "body": [
           "llLinkSitTarget(${1|integer link,LINK_THIS,LINK_ROOT|}, ${name:offset}, ${name:rot});$0"
        ],
        "description": "llLinkSitTarget( integer link, vector offset, rotation rot );\n\n ? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSet the sit location for the linked prim(s). The sit location is relative to the prim's position and rotation.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag \n• vector offset – Additional position for the sit target in local prim coordinates.\n• rotation rot – Additional rotation for the sit target relative to the prim rotation.\nIf offset == <0.0, 0.0, 0.0> then the sit target is removed.\n"
    },
    "llUpdateCharacter": {
        "prefix": "llUpdateCharacter",
        "body": [
           "llUpdateCharacter(${name:options});$0"
        ],
        "description": "llUpdateCharacter( list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nUpdates settings for a character\n• list options – Character configuration options.\n"
    },
    "llList2List": {
        "prefix": "llList2List",
        "body": [
           "llList2List(${name:src}, ${name:start}, ${name:end}$0)"
        ],
        "description": "list llList2List( list src, integer start, integer end );\n\n 192 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list that is a slice of src from start to end.\n• list src\n• integer start – start index\n• integer end – end index\nstart & end support negative indexes."
    },
    "llList2ListStrided": {
        "prefix": "llList2ListStrided",
        "body": [
           "llList2ListStrided(${name:src}, ${name:start}, ${name:end}, ${name:stride}$0)"
        ],
        "description": "list llList2ListStrided( list src, integer start, integer end, integer stride );\n\n 198 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list of all the entries in the strided list whose index is a multiple of stride in the range start to end.\n• list src\n• integer start – start index\n• integer end – end index\n• integer stride – number of entries per stride, if less than 1 it is assumed to be 1This function supports Strided Lists."
    },
    "llSetObjectPermMask": {
        "prefix": "llSetObjectPermMask",
        "body": [
           "llSetObjectPermMask(${name:mask}, ${name:value});$0"
        ],
        "description": "llSetObjectPermMask( integer mask, integer value );\n\n 288 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the given permission mask to the new value on the root object the task is attached to.\n• integer mask – MASK_* flag\n• integer value – bit-field, PERM_* flags\n"
    },
    "llGetSPMaxMemory": {
        "prefix": "llGetSPMaxMemory",
        "body": [
           "llGetSPMaxMemory($0)"
        ],
        "description": "integer llGetSPMaxMemory( );\n\n ??? Function ID\n 0.0 Forced Delay\n ??? Energy\n\nReturns the integer of the most bytes used while LlScriptProfiler was last active."
    },
    "llListen": {
        "prefix": "llListen",
        "body": [
           "llListen(${name:channel}, ${name:name}, ${name:id}, ${name:msg}$0)"
        ],
        "description": "integer llListen( integer channel, string name, key id, string msg );\n\n 25 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets a handle for msg on channel from name and id.Returns a handle (an integer) that can be used to deactivate or remove the listen.\n• integer channel – input chat channel, any integer value (-2147483648 through 2147483647)\n• string name – filter for specific prim name or avatar legacy name\n• key id – filter for specific group, avatar or prim UUID\n• string msg – filter for specific message\nIf msg, name or id are blank (i.e. \"\") they are not used to filter incoming messages.\nIf id is an invalid key or assigned the value NULL_KEY, it is considered blank as well.\n"
    },
    "llGetSimStats": {
        "prefix": "llGetSimStats",
        "body": [
           "llGetSimStats(${1:SIM_STAT_PCT_CHARS_STEPPED}$0)"
        ],
        "description": "float llGetSimStats( integer stat_type );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a float that is the requested statistic.\n• integer stat_type – SIM_STAT_* flag\n"
    },
    "llSetHoverHeight": {
        "prefix": "llSetHoverHeight",
        "body": [
           "llSetHoverHeight(${name:height}, ${2|TRUE,FALSE|}, ${name:tau});$0"
        ],
        "description": "llSetHoverHeight( float height, integer water, float tau );\n\n 123 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nCritically damps to a height above the ground (or water) in tau seconds.\n• float height – Distance to hover above the ground (if negative, hovers below ground)\n• integer water – boolean, if TRUE then hover above water too (or below if height is negative), if FALSE ignore water like it isn't there\n• float tau – seconds to critically damp in\nDo not use with vehicles.Use llStopHover to stop hovering.\n"
    },
    "llTriggerSound": {
        "prefix": "llTriggerSound",
        "body": [
           "llTriggerSound(${name:sound}, ${name:volume});$0"
        ],
        "description": "llTriggerSound( string sound, float volume );\n\n 91 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPlays sound at volume, centered at but not attached to object.\n• string sound – a sound in the inventory of the prim this script is in or a UUID of a sound\n• float volume – between 0.0 (silent) and 1.0 (loud) (0.0 <= volume <= 1.0)\nIf the object moves the sound does not move with it.Use llPlaySound to play a sound attached to the object.\n"
    },
    "llGetTextureOffset": {
        "prefix": "llGetTextureOffset",
        "body": [
           "llGetTextureOffset(${name:face}$0)"
        ],
        "description": "vector llGetTextureOffset( integer face );\n\n 178 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the texture offset of face in the x (\"U\", horizontal) and y (\"V\", vertical) components. The z component is unused.\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function returns the value for face zero."
    },
    "llGetTime": {
        "prefix": "llGetTime",
        "body": [
           "llGetTime($0)"
        ],
        "description": "float llGetTime( );\n\n 82 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is script time in seconds with subsecond precision since the script started, was last reset, or call to either llResetTime or llGetAndResetTime."
    },
    "llGetRootPosition": {
        "prefix": "llGetRootPosition",
        "body": [
           "llGetRootPosition($0)"
        ],
        "description": "vector llGetRootPosition( );\n\n 268 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the region position of the root object of the object script is attached to"
    },
    "llJsonValueType": {
        "prefix": "llJsonValueType",
        "body": [
           "llJsonValueType(${name:json}, ${2|JSON_INVALID,JSON_OBJECT,JSON_ARRAY,JSON_NUMBER,JSON_STRING,JSON_NULL,JSON_TRUE,JSON_FALSE,JSON_DELETE|}$0)"
        ],
        "description": "string llJsonValueType( string json, list specifiers );\n\n ? Function ID\n 0.0 Forced Delay\n 0.0 Energy\n\nGets the JSON type for the value in json at the location specifiers.Returns the string specifying the type of the value at specifiers in json.\n• string json – A string serialization of a json object.\n• list specifiers – A path to a value in the json parameter.\n"
    },
    "llRemoveVehicleFlags": {
        "prefix": "llRemoveVehicleFlags",
        "body": [
           "llRemoveVehicleFlags(${1|VEHICLE_FLAG_NO_DEFLECTION_UP,VEHICLE_FLAG_LIMIT_ROLL_ONLY,VEHICLE_FLAG_HOVER_WATER_ONLY,VEHICLE_FLAG_HOVER_TERRAIN_ONLY,VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT,VEHICLE_FLAG_HOVER_UP_ONLY,VEHICLE_FLAG_LIMIT_MOTOR_UP,VEHICLE_FLAG_MOUSELOOK_STEER,VEHICLE_FLAG_MOUSELOOK_BANK,VEHICLE_FLAG_CAMERA_DECOUPLED|});$0"
        ],
        "description": "llRemoveVehicleFlags( integer flags );\n\n 237 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nDisable the specified vehicle flags\n• integer flags – mask of VEHICLE_FLAG_* flags\n"
    },
    "llGetTexture": {
        "prefix": "llGetTexture",
        "body": [
           "llGetTexture(${name:face}$0)"
        ],
        "description": "string llGetTexture( integer face );\n\n 57 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the texture on face\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function returns the value for face zero.\nIf the texture is in the prim's inventory, the return value is the inventory name, otherwise the returned value is the texture UUID.\n"
    },
    "llGetStatus": {
        "prefix": "llGetStatus",
        "body": [
           "llGetStatus(${1|STATUS_PHYSICS,STATUS_ROTATE_X,STATUS_ROTATE_Y,STATUS_ROTATE_Z,STATUS_PHANTOM,STATUS_SANDBOX,STATUS_BLOCK_GRAB,STATUS_DIE_AT_EDGE,STATUS_RETURN_AT_EDGE,STATUS_CAST_SHADOWS,STATUS_BLOCK_GRAB_OBJECT|}$0)"
        ],
        "description": "integer llGetStatus( integer status );\n\n 46 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a boolean (an integer) equal to the status of the object.\n• integer status – A single STATUS_* flag\n"
    },
    "llList2String": {
        "prefix": "llList2String",
        "body": [
           "llList2String(${name:src}, ${name:index}$0)"
        ],
        "description": "string llList2String( list src, integer index );\n\n 188 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is at index in src.\n• list src – List containing the element of interest.\n• integer index – Index of the element of interest.\nindex supports negative indexes.\nIf index describes a location not in src then null string is returned.\nIf the type of the element at index in src is not a string it is typecast to a string."
    },
    "llListFindList": {
        "prefix": "llListFindList",
        "body": [
           "llListFindList(${name:src}, ${name:test}$0)"
        ],
        "description": "integer llListFindList( list src, list test );\n\n 201 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the integer index of the first instance of test in src.\n• list src – what to search in (haystack)\n• list test – what to search for (needle)\nIf test is not found in src, -1 is returned.\nThe index of the first entry in the list is 0\nIf test is found at the last index in src the positive index is returned (5th entry of 5 returns 4).\n"
    },
    "llGetDayOffset": {
        "prefix": "llGetDayOffset",
        "body": [
           "llGetDayOffset($0)"
        ],
        "description": "integer llGetDayOffset( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturn the number of seconds added to the current time before calculating the current environmental time for the parcel. llGetDayOffset returns the value for the current parcel, llGetRegionDayOffset produces the same value for the entire region.Returns an integer "
    },
    "llKeyCountKeyValue": {
        "prefix": "llKeyCountKeyValue",
        "body": [
           "llKeyCountKeyValue($0)"
        ],
        "description": "key llKeyCountKeyValue( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nStart an asynchronous transaction to request the number of keys with the script's Experience.Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results."
    },
    "llHTTPRequest": {
        "prefix": "llHTTPRequest",
        "body": [
           "llHTTPRequest(${name:url}, ${2|HTTP_METHOD,HTTP_MIMETYPE,HTTP_BODY_MAXLENGTH,HTTP_VERIFY_CERT,HTTP_VERBOSE_THROTTLE,HTTP_CUSTOM_HEADER,HTTP_PRAGMA_NO_CACHE,HTTP_USER_AGENT,HTTP_ACCEPT,HTTP_EXTENDED_ERROR|}, ${name:body}$0)"
        ],
        "description": "key llHTTPRequest( string url, list parameters, string body );\n\n 230 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSends an HTTP request to the specified URL with the body of the request and parameters.Returns a handle (a key) identifying the HTTP request made.\n• string url – A valid HTTP/HTTPS URL.\n• list parameters – configuration parameters, specified as HTTP_* flag-value pairs\n[ parameter1, value1, parameter2, value2, . . . parameterN, valueN]• string body – Contents of the request.\n"
    },
    "llPlaySoundSlave": {
        "prefix": "llPlaySoundSlave",
        "body": [
           "llPlaySoundSlave(${name:sound}, ${name:volume});$0"
        ],
        "description": "llPlaySoundSlave( string sound, float volume );\n\n 90 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPlays attached sound once at volume, synced to next loop of most audible sync master declared by llLoopSoundMaster.\n• string sound – a sound in the inventory of the prim this script is in or a UUID of a sound\n• float volume – between 0.0 (silent) and 1.0 (loud) (0.0 <= volume <= 1.0)\n"
    },
    "llSetMemoryLimit": {
        "prefix": "llSetMemoryLimit",
        "body": [
           "llSetMemoryLimit(${name:limit}$0)"
        ],
        "description": "integer llSetMemoryLimit( integer limit );\n\n ??? Function ID\n 0.0 Forced Delay\n ??? Energy\n\nRequest limit bytes to be reserved for this script.Returns the boolean (an integer) TRUE if the memory limit was successfully set (or FALSE if not).\n• integer limit\n"
    },
    "llXorBase64": {
        "prefix": "llXorBase64",
        "body": [
           "llXorBase64(${name:str1}, ${name:str2}$0)"
        ],
        "description": "string llXorBase64( string str1, string str2 );\n\n ? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nCorrectly performs an exclusive or on two Base64 strings.Returns a string that is a Base64 XOR of str1 and str2.\n• string str1 – Base64 string\n• string str2 – Base64 string\nstr2 repeats if it is shorter than str1. If the inputs are not Base64 strings the result will be erratic. Be sure to read the Cryptography section before designing a cryptographic algorithm.\n"
    },
    "llSetPrimURL": {
        "prefix": "llSetPrimURL",
        "body": [
           "llSetPrimURL(${name:url});$0"
        ],
        "description": "llSetPrimURL( string url );\n\n 305 Function ID\n 20.0 Forced Delay\n 10.0 Energy\n\nUpdates the URL for the web page shown on the sides of the object.\n• string url\n"
    },
    "llSetScale": {
        "prefix": "llSetScale",
        "body": [
           "llSetScale(${name:size});$0"
        ],
        "description": "llSetScale( vector size );\n\n 47 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the size of the prim according to size\n• vector size\nThe components of size (x, y & z) each need to be in the range [0.01, 64.0], if they are out of the range they are rounded to the nearest endpoint.\n"
    },
    "llListSort": {
        "prefix": "llListSort",
        "body": [
           "llListSort(${name:src}, ${name:stride}, ${3|TRUE,FALSE|}$0)"
        ],
        "description": "list llListSort( list src, integer stride, integer ascending );\n"
    },
    "llJson2List": {
        "prefix": "llJson2List",
        "body": [
           "llJson2List(${name:src}$0)"
        ],
        "description": "list llJson2List( string src );\n\n ? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nThis function takes a string representing JSON, and returns a list of the top level.Returns a list made by parsing src, a string representing json.\n• string src\nTo convert a list into a json formatted string use llList2Json.\n"
    },
    "llGetRegionName": {
        "prefix": "llGetRegionName",
        "body": [
           "llGetRegionName($0)"
        ],
        "description": "string llGetRegionName( );\n\n 226 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the current region name"
    },
    "llGetParcelMusicURL": {
        "prefix": "llGetParcelMusicURL",
        "body": [
           "llGetParcelMusicURL($0)"
        ],
        "description": "string llGetParcelMusicURL( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a string containing the parcel streaming audio URL.The object owner must also be the land owner. If the land is deeded to a group the object will need to be deeded to the same group for this function to work.\n"
    },
    "llListenRemove": {
        "prefix": "llListenRemove",
        "body": [
           "llListenRemove(${name:handle});$0"
        ],
        "description": "llListenRemove( integer handle );\n\n 27 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRemoves listen event callback handle\n• integer handle – handle to control listen event\n"
    },
    "llListReplaceList": {
        "prefix": "llListReplaceList",
        "body": [
           "llListReplaceList(${name:dest}, ${name:src}, ${name:start}, ${name:end}$0)"
        ],
        "description": "list llListReplaceList( list dest, list src, integer start, integer end );\n\n 296 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list that is a copy of dest with start through end removed and src inserted at start.\n• list dest – destination\n• list src – source\n• integer start – start index\n• integer end – end index\nstart & end support negative indexes."
    },
    "llList2Json": {
        "prefix": "llList2Json",
        "body": [
           "llList2Json(${name:type}, ${2|JSON_INVALID,JSON_OBJECT,JSON_ARRAY|}$0)"
        ],
        "description": "string llList2Json( string type, list values );\n\n ? Function ID\n 0.0 Forced Delay\n  Energy\n\nThis function takes a list and returns a JSON string of that list as either a json object or json array.Returns a string that is either values serialized as a JSON type, or if an error was encountered JSON_INVALID.\n• string type\n• list values\nTo convert a json formatted string into a list use llJson2List.\n"
    },
    "llGiveMoney": {
        "prefix": "llGiveMoney",
        "body": [
           "llGiveMoney(${name:destination}, ${name:amount}$0)"
        ],
        "description": "integer llGiveMoney( key destination, integer amount );\n\n 99 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nTransfer amount of L$ money from script owner to destination avatar.Returns an integer that is always zero. In contrast llTransferLindenDollars returns a key that can be used to match the function call to the resulting transaction_result event and the transaction history.\n• key destination – avatar UUID\n• integer amount – number of L$, must be greater than zero, (amount > 0)To run this function the script must request the PERMISSION_DEBIT permission with llRequestPermissions and it must be granted by the owner."
    },
    "llGroundNormal": {
        "prefix": "llGroundNormal",
        "body": [
           "llGroundNormal(${name:offset}$0)"
        ],
        "description": "vector llGroundNormal( vector offset );\n\n 222 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the ground normal from the current position + offset.\n• vector offset – offset relative to the prim's position and expressed in local coordinates\nThe requested position needs to be in the same region.\nOnly the x and y coordinates in offset are important, the z component is ignored."
    },
    "llGetVel": {
        "prefix": "llGetVel",
        "body": [
           "llGetVel($0)"
        ],
        "description": "vector llGetVel( );\n\n 77 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the velocity of the object.Speed is the magnitude of the velocity. Speed is measured in meter per second.\nVelocity reported is relative to the global coordinate frame (the object rotation has no affect on this functions output).\nFor physic objects , velocity is the velocity of its center of mass llGetCenterOfMass . ( When the object has some torque and has not force , position of the object moves ( it turns ) , but its center of mass is unchanged , so the velocity is null )\n"
    },
    "llGetDisplayName": {
        "prefix": "llGetDisplayName",
        "body": [
           "llGetDisplayName(${name:id}$0)"
        ],
        "description": "string llGetDisplayName( key id );\n\n 360 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the non-unique display name of the avatar specified by id.\n• key id – avatar UUID that is in the same region or is otherwise known to the region\nid must specify a valid avatar key, present in or otherwise known to the sim in which the script is running, otherwise an empty string is returned. This function will still return a valid display name if the avatar is a child agent of the sim (i.e., in an adjacent sim, but presently able to see into the one the script is in), or for a short period after the avatar leaves the sim (specifically, when the client completely disconnects from the sim, either as a main or child agent).\n"
    },
    "llGetTextureScale": {
        "prefix": "llGetTextureScale",
        "body": [
           "llGetTextureScale(${name:face}$0)"
        ],
        "description": "vector llGetTextureScale( integer face );\n\n 179 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the texture scale on face (only the x and y components are used).\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llRequestSimulatorData": {
        "prefix": "llRequestSimulatorData",
        "body": [
           "llRequestSimulatorData(${name:region}, ${2|DATA_SIM_POS,DATA_SIM_STATUS,DATA_SIM_RATING|}$0)"
        ],
        "description": "key llRequestSimulatorData( string region, integer data );\n\n 293 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nRequests data about region. When data is available the dataserver event will be raised.Returns a handle (a key) for a dataserver event response.\n• string region – Case sensitive region name.\n• integer data – DATA_* flag\n"
    },
    "llGetUnixTime": {
        "prefix": "llGetUnixTime",
        "body": [
           "llGetUnixTime($0)"
        ],
        "description": "integer llGetUnixTime( );\n\n 316 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock."
    },
    "llGetParcelMaxPrims": {
        "prefix": "llGetParcelMaxPrims",
        "body": [
           "llGetParcelMaxPrims(${name:pos}, ${2|TRUE,FALSE|}$0)"
        ],
        "description": "integer llGetParcelMaxPrims( vector pos, integer sim_wide );\n\n 326 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the maximum combined land impact allowed for objects on the parcel at pos.\n• vector pos – position in region coordinates (z component is ignored)\n• integer sim_wide – TRUE treats all parcels owned by this parcel owner in the sim in a single maximum, FALSE determines the max for the specified parcel\n"
    },
    "llHTTPResponse": {
        "prefix": "llHTTPResponse",
        "body": [
           "llHTTPResponse(${name:request_id}, ${name:status}, ${name:body});$0"
        ],
        "description": "llHTTPResponse( key request_id, integer status, string body );\n\n 348 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nResponds to request_id with status and body.\n• key request_id – A valid HTTP request key.\n• integer status – HTTP Status (200, 400, 404, etc)\n• string body – Contents of the response.\nThe response need not be made inside the http_request event but if it does not happen in a timely fashion the request will time out (within 25 seconds).\n"
    },
    "llList2Rot": {
        "prefix": "llList2Rot",
        "body": [
           "llList2Rot(${name:src}, ${name:index}$0)"
        ],
        "description": "rotation llList2Rot( list src, integer index );\n\n 191 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a rotation that is at index in src.\n• list src – List containing the element of interest.\n• integer index – Index of the element of interest.\nindex supports negative indexes.\nIf index describes a location not in src then ZERO_ROTATION is returned.\nIf the type of the element at index in src is not a rotation then ZERO_ROTATION is returned. \nHere is a workaround: (rotation)llList2String(src, index);\n\n  \n   \n   Important: Please read this intro of how to iterate over a list in LSL.\n  "
    },
    "llGetCreator": {
        "prefix": "llGetCreator",
        "body": [
           "llGetCreator($0)"
        ],
        "description": "key llGetCreator( );\n\n 272 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a key for the creator of the prim."
    },
    "llGetTimestamp": {
        "prefix": "llGetTimestamp",
        "body": [
           "llGetTimestamp($0)"
        ],
        "description": "string llGetTimestamp( );\n\n 273 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the current date and time in the UTC time zone in the format \"YYYY-MM-DDThh:mm:ss.ff..fZ\"Appears to be accurate to milliseconds.\n"
    },
    "llGetParcelPrimCount": {
        "prefix": "llGetParcelPrimCount",
        "body": [
           "llGetParcelPrimCount(${name:pos}, ${2|PARCEL_COUNT_TOTAL,PARCEL_COUNT_OWNER,PARCEL_COUNT_GROUP,PARCEL_COUNT_OTHER,PARCEL_COUNT_SELECTED,PARCEL_COUNT_TEMP|}, ${3|TRUE,FALSE|}$0)"
        ],
        "description": "integer llGetParcelPrimCount( vector pos, integer category, integer sim_wide );\n\n 325 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the total land impact of objects on the parcel at pos of the given category\n• vector pos – position in region coordinates (z component is ignored)\n• integer category – a PARCEL_COUNT_* flag\n• integer sim_wide – boolean,  TRUE searches parcels in the region with the same owner as the targeted parcel, FALSE searches only the targeted parcel\n"
    },
    "llGetOwnerKey": {
        "prefix": "llGetOwnerKey",
        "body": [
           "llGetOwnerKey(${name:id}$0)"
        ],
        "description": "key llGetOwnerKey( key id );\n\n 182 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a key that is the owner of prim id\n• key id – prim UUID that is in the same region\n"
    },
    "llResetOtherScript": {
        "prefix": "llResetOtherScript",
        "body": [
           "llResetOtherScript(${name:name});$0"
        ],
        "description": "llResetOtherScript( string name );\n\n 249 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nResets script name.\n• string name – a script in the inventory of the prim this script is in\nOn script reset...\nThe current event/function is exited without further execution or return.All global variables are set to their defaultsThe event queue is cleared, and recurring events are stopped.The default state is set as the active stateIf it has a state_entry event, then it is queued.\n"
    },
    "llList2CSV": {
        "prefix": "llList2CSV",
        "body": [
           "llList2CSV(${name:src}$0)"
        ],
        "description": "string llList2CSV( list src );\n\n 195 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string of comma separated values taken in order from src.\n• list src\nMore precisely the values are separated with a comma and a space (\", \").\nThis function's functionality is equivalent to llDumpList2String(src, \", \");\nThe result of this function is more or less the CSV format, but it does not conform in all its details.\nTo reverse the process use llCSV2List. But see the Caveat.\n"
    },
    "llGetWallclock": {
        "prefix": "llGetWallclock",
        "body": [
           "llGetWallclock($0)"
        ],
        "description": "float llGetWallclock( );\n\n 81 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the time in seconds since midnight Pacific time (PST/PDT), truncated to whole seconds. That is the same as the time of day in SLT expressed as seconds.For GMT use llGetGMTclock\n"
    },
    "llList2Integer": {
        "prefix": "llList2Integer",
        "body": [
           "llList2Integer(${name:src}, ${name:index}$0)"
        ],
        "description": "integer llList2Integer( list src, integer index );\n\n 186 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is at index in src.\n• list src – List containing the element of interest.\n• integer index – Index of the element of interest.\nindex supports negative indexes.\nIf index describes a location not in src then zero is returned.\nIf the type of the element at index in src is not a integer it is typecast to a integer. If it cannot be typecast zero is returned.\n  \n   \n   Important: Please read this intro of how to iterate over a list in LSL.\n  "
    },
    "llGetAgentSize": {
        "prefix": "llGetAgentSize",
        "body": [
           "llGetAgentSize(${name:avatar}$0)"
        ],
        "description": "vector llGetAgentSize( key avatar );\n\n 218 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is an estimated size of the requested avatar.\n• key avatar – avatar UUID that is in the same region\nZERO_VECTOR is returned if avatar is not in the region or if it is not an avatar.\n"
    },
    "llReturnObjectsByID": {
        "prefix": "llReturnObjectsByID",
        "body": [
           "llReturnObjectsByID(${name:objects}$0)"
        ],
        "description": "integer llReturnObjectsByID( list objects );\n\n ? Function ID\n 0.0 Forced Delay\n  Energy\n\nIf the script is owned by an agent, PERMISSION_RETURN_OBJECTS may be granted by the owner. If the script is owned by a group, this permission may be granted by an agent belonging to the group's \"Owners\" role.Returns an integer that is the number of objects successfully returned to their owners or an ERR_* flag.\n• list objects – list of object uuids (keys)To run this function the script must request the PERMISSION_RETURN_OBJECTS permission with llRequestPermissions.\nIf the return value is negative, it represents an error flag.\n"
    },
    "llGroundSlope": {
        "prefix": "llGroundSlope",
        "body": [
           "llGroundSlope(${name:offset}$0)"
        ],
        "description": "vector llGroundSlope( vector offset );\n\n 221 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the ground slope below the object position + offset\n• vector offset – offset relative to the prim's position and expressed in local coordinates\nThe requested position needs to be in the same region.\nOnly the x and y coordinates in offset are important, the z component is ignored."
    },
    "llRezObject": {
        "prefix": "llRezObject",
        "body": [
           "llRezObject(${name:inventory}, ${name:pos}, ${name:vel}, ${name:rot}, ${name:param});$0"
        ],
        "description": "llRezObject( string inventory, vector pos, vector vel, rotation rot, integer param );\n\n 104 Function ID\n 0.1 Forced Delay\n 200.0 Energy\n\nInstantiate inventory object at pos with velocity vel and rotation rot with start parameter param\n• string inventory – an object in the inventory of the prim this script is in\n• vector pos – position in region coordinates\n• vector vel – velocity (max magnitude is approximately 200m/s)\n• rotation rot – rotation\n• integer param – on_rez event parameter and value returned by llGetStartParameter in the rezzed object (or by each of the items in a coalesced object).\nThe root of inventory is not at pos but the center of inventory is.To have the root prim at pos use llRezAtRoot instead.\n"
    },
    "llGiveInventoryList": {
        "prefix": "llGiveInventoryList",
        "body": [
           "llGiveInventoryList(${name:target}, ${name:folder}, ${name:inventory});$0"
        ],
        "description": "llGiveInventoryList( key target, string folder, list inventory );\n\n 231 Function ID\n 3.0 Forced Delay\n 10.0 Energy\n\nGives inventory items to target, creating a new folder to put them in.\n• key target – group, avatar or prim UUID that is in the same region\n• string folder – folder name to use\n• list inventory – a list of items in the inventory of the prim this script is in\n"
    },
    "llRezAtRoot": {
        "prefix": "llRezAtRoot",
        "body": [
           "llRezAtRoot(${name:inventory}, ${name:position}, ${name:velocity}, ${name:rot}, ${name:param});$0"
        ],
        "description": "llRezAtRoot( string inventory, vector position, vector velocity, rotation rot, integer param );\n\n 286 Function ID\n 0.1 Forced Delay\n 200.0 Energy\n\nInstantiate inventory object rotated to rot with its root at position, moving at velocity, using param as the start parameter\n• string inventory – an object in the inventory of the prim this script is in\n• vector position – position in region coordinates to place the object\n• vector velocity – initial velocity\n• rotation rot – initial rotation\n• integer param – on_rez event parameter and value returned by llGetStartParameter in the rezzed object (or by each of the items in a coalesced object).\nTo rez an object so its center is at position (instead of the root) use llRezObject instead.\n"
    },
    "llGetLinkMedia": {
        "prefix": "llGetLinkMedia",
        "body": [
           "llGetLinkMedia(${1|integer link,LINK_ROOT,LINK_THIS|}, ${name:face}, ${3|PRIM_MEDIA_ALT_IMAGE_ENABLE,PRIM_MEDIA_CONTROLS,PRIM_MEDIA_CURRENT_URL,PRIM_MEDIA_HOME_URL,PRIM_MEDIA_AUTO_LOOP,PRIM_MEDIA_AUTO_PLAY,PRIM_MEDIA_AUTO_SCALE,PRIM_MEDIA_AUTO_ZOOM,PRIM_MEDIA_FIRST_CLICK_INTERACT,PRIM_MEDIA_WIDTH_PIXELS,PRIM_MEDIA_HEIGHT_PIXELS,PRIM_MEDIA_WHITELIST_ENABLE,PRIM_MEDIA_WHITELIST,PRIM_MEDIA_PERMS_INTERACT,PRIM_MEDIA_PERMS_CONTROL|}$0)"
        ],
        "description": "list llGetLinkMedia( integer link, integer face, list params );\n\n ? Function ID\n 0.0 Forced Delay\n 0.0 Energy\n\nGet the media params for a particular face on a linked prim, given the desired list of named params.Returns a parameter list (a list) of values in the order requested.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag \n• integer face – face number\n• list params – a set of names (in no particular order)Returns an empty list if no media exists on the face(s).\n"
    },
    "llRequestUsername": {
        "prefix": "llRequestUsername",
        "body": [
           "llRequestUsername(${name:id}$0)"
        ],
        "description": "key llRequestUsername( key id );\n\n 359 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRequests the Username of the agent identified by id. When the Username is available the dataserver event will be raised. The agent identified by id does not need to be in the same region or online at the time of the request.Returns a handle (a key) that is used to identify the dataserver event when it is raised.\nIf id is not the UUID of an avatar, the dataserver event is not raised.\n• key id – avatar UUID\n"
    },
    "llListInsertList": {
        "prefix": "llListInsertList",
        "body": [
           "llListInsertList(${name:dest}, ${name:src}, ${name:start}$0)"
        ],
        "description": "list llListInsertList( list dest, list src, integer start );\n\n 200 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list that contains all the elements from dest but with the elements from src inserted at position start.\n• list dest\n• list src\n• integer start\nstart supports negative indexes."
    },
    "llResetLandPassList": {
        "prefix": "llResetLandPassList",
        "body": [
           "llResetLandPassList();$0"
        ],
        "description": "llResetLandPassList( );\n\n 322 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nRemoves all residents from the land access/pass list."
    },
    "llGetParcelDetails": {
        "prefix": "llGetParcelDetails",
        "body": [
           "llGetParcelDetails(${name:pos}, ${name:params}$0)"
        ],
        "description": "list llGetParcelDetails( vector pos, list params );\n\n 327 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list that is the parcel details specified in params (in the same order) for the parcel at pos.\n• vector pos – only x and y are important and to be given in region coordinates\n• list params – a list of PARCEL_DETAILS_* flags.\nBoth x and y components of pos are clamped to the range [0.0, 256.0], the z component is ignored.\n"
    },
    "llGetUsername": {
        "prefix": "llGetUsername",
        "body": [
           "llGetUsername(${name:id}$0)"
        ],
        "description": "string llGetUsername( key id );\n\n 358 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the unique username of the avatar specified by id.\n• key id – avatar UUID that is in the same region or is otherwise known to the region\nid must specify a valid avatar key, present in or otherwise known to the sim in which the script is running, otherwise an empty string is returned. This function will still return a valid username if the avatar is a child agent of the sim (i.e., in an adjacent sim, but presently able to see into the one the script is in), or for a short period after the avatar leaves the sim (specifically, when the client completely disconnects from the sim, either as a main or child agent).\n"
    },
    "llListenControl": {
        "prefix": "llListenControl",
        "body": [
           "llListenControl(${name:handle}, ${2|TRUE,FALSE|});$0"
        ],
        "description": "llListenControl( integer handle, integer active );\n\n 26 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nMakes listen event callback handle active or inactive\n• integer handle – handle to control listen event\n• integer active – TRUE (default) activates, FALSE deactivates\n"
    },
    "llRemoveFromLandPassList": {
        "prefix": "llRemoveFromLandPassList",
        "body": [
           "llRemoveFromLandPassList(${name:avatar});$0"
        ],
        "description": "llRemoveFromLandPassList( key avatar );\n\n 311 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nRemove avatar from the land pass list.\n• key avatar – avatar UUID\n"
    },
    "llResetAnimationOverride": {
        "prefix": "llResetAnimationOverride",
        "body": [
           "llResetAnimationOverride(${name:anim_state});$0"
        ],
        "description": "llResetAnimationOverride( string anim_state );\n\n ? Function ID\n 0.0 Forced Delay\n ? Energy\n\nResets the animation override of the specified animation state (anim_state) to the corresponding default value.\n• string anim_state – animation state to be resetTo run this function the script must request the PERMISSION_OVERRIDE_ANIMATIONS permission with llRequestPermissions.\nIf anim_state equals \"ALL\", all animation states are reset.\n"
    },
    "llDataSizeKeyValue": {
        "prefix": "llDataSizeKeyValue",
        "body": [
           "llDataSizeKeyValue($0)"
        ],
        "description": "key llDataSizeKeyValue( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nStart an asynchronous transaction to request the used and total amount of data allocated for the Experience.Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results."
    },
    "llDetectedVel": {
        "prefix": "llDetectedVel",
        "body": [
           "llDetectedVel(${name:number}$0)"
        ],
        "description": "vector llDetectedVel( integer number );\n\n 36 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the vector velocity of detected object or avatar number.\n• integer number – Index of detection information\nnumber does not support negative indexes.\nReturns <0.0, 0.0, 0.0> if number is not valid sensed object or avatar.\n"
    },
    "llSetRot": {
        "prefix": "llSetRot",
        "body": [
           "llSetRot(${name:rot});$0"
        ],
        "description": "llSetRot( rotation rot );\n\n 61 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nSets the rotation of the prim to rot.\n• rotation rot\n"
    },
    "llDie": {
        "prefix": "llDie",
        "body": [
           "llDie();$0"
        ],
        "description": "llDie( );\n\n 41 Function ID\n 0.0 Forced Delay\n 0.0 Energy\n\nDeletes the object. The object does not go to the owners Inventory:Trash.If called in any prim in the link set the result will be the deletion of the entire object.To remove a single prim from an object use llBreakLink first.\n"
    },
    "llDetectedGroup": {
        "prefix": "llDetectedGroup",
        "body": [
           "llDetectedGroup(${name:number}$0)"
        ],
        "description": "integer llDetectedGroup( integer number );\n\n 39 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is TRUE if the detected object or agent has the same active group as the prim containing the script. Otherwise FALSE is returned.\n• integer number – Index of detection information\nnumber does not support negative indexes.\nReturns FALSE if number is out of range.\n"
    },
    "llSetText": {
        "prefix": "llSetText",
        "body": [
           "llSetText(${name:text}, ${name:color}, ${name:alpha});$0"
        ],
        "description": "llSetText( string text, vector color, float alpha );\n\n 152 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nDisplays text that hovers over the prim with specific color and translucency (specified with alpha).\n• string text – floating text to display\n• vector color – color in RGB <R, G, B> (<0.0, 0.0, 0.0> = black, <1.0, 1.0, 1.0> = white)\n• float alpha – from 0.0 (clear) to 1.0 (solid) (0.0 <= alpha <= 1.0)\n"
    },
    "llMakeFountain": {
        "prefix": "llMakeFountain",
        "body": [
           "llMakeFountain(DEPRACATED, Please No);$0"
        ],
        "description": "llMakeFountain( integer particles, float scale, float vel, float lifetime, float arc, integer bounce, string texture, vector offset, float bounce_offset );\n\n 101 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nMake a fountain of particles\n• integer particles\n• float scale\n• float vel\n• float lifetime\n• float arc\n• integer bounce\n• string texture – a texture in the inventory of the prim this script is in or a UUID of a texture\n• vector offset – offset relative to the prim's position and expressed in local coordinates and is completely ignored.\n• float bounce_offset\n"
    },
    "llResetLandBanList": {
        "prefix": "llResetLandBanList",
        "body": [
           "llResetLandBanList();$0"
        ],
        "description": "llResetLandBanList( );\n\n 321 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nRemoves all residents from the land ban list."
    },
    "llResetTime": {
        "prefix": "llResetTime",
        "body": [
           "llResetTime();$0"
        ],
        "description": "llResetTime( );\n\n 83 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nResets the script-time timer to zero."
    },
    "llRequestSecureURL": {
        "prefix": "llRequestSecureURL",
        "body": [
           "llRequestSecureURL($0)"
        ],
        "description": "key llRequestSecureURL( );\n\n 346 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRequests one HTTPS:// (SSL) url for use by this object. The http_request event is tiggered with result of the request. HTTPS-in uses port 12043.Returns a handle (a key) used for identifying the result of the request in the http_request event."
    },
    "llGetExperienceErrorMessage": {
        "prefix": "llGetExperienceErrorMessage",
        "body": [
           "llGetExperienceErrorMessage(${1|XP_ERROR_NONE,XP_ERROR_THROTTLED,XP_ERROR_EXPERIENCES_DISABLED,XP_ERROR_INVALID_PARAMETERS,XP_ERROR_NOT_PERMITTED,XP_ERROR_NO_EXPERIENCE,XP_ERROR_NOT_FOUND,XP_ERROR_INVALID_EXPERIENCE,XP_ERROR_EXPERIENCE_DISABLED,XP_ERROR_EXPERIENCE_SUSPENDED,XP_ERROR_UNKNOWN_ERROR,XP_ERROR_QUOTA_EXCEEDED,XP_ERROR_STORE_DISABLED,XP_ERROR_STORAGE_EXCEPTION,XP_ERROR_KEY_NOT_FOUND,XP_ERROR_RETRY_UPDATE,XP_ERROR_MATURITY_EXCEEDED,XP_ERROR_NOT_PERMITTED_LAND,XP_ERROR_REQUEST_PERM_TIMEOUT|}$0)"
        ],
        "description": "string llGetExperienceErrorMessage( integer error );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a text description of a particular Experience LSL error constant.Returns a string describing the error code passed or the string corresponding to error. Returns XP_ERROR_UNKNOWN_ERROR if the error is not a valid error code.\n• integer error – The error code constant to translate.\n"
    },
    "llSetVehicleFloatParam": {
        "prefix": "llSetVehicleFloatParam",
        "body": [
           "llSetVehicleFloatParam(${1|VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY,VEHICLE_ANGULAR_DEFLECTION_TIMESCALE,VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE,VEHICLE_ANGULAR_MOTOR_TIMESCALE,VEHICLE_BANKING_EFFICIENCY,VEHICLE_BANKING_MIX,VEHICLE_BANKING_TIMESCALE,VEHICLE_BUOYANCY,VEHICLE_HOVER_HEIGHT,VEHICLE_HOVER_EFFICIENCY,VEHICLE_HOVER_TIMESCALE,VEHICLE_LINEAR_DEFLECTION_EFFICIENCY,VEHICLE_LINEAR_DEFLECTION_TIMESCALE,VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE,VEHICLE_LINEAR_MOTOR_TIMESCALE,VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY,VEHICLE_VERTICAL_ATTRACTION_TIMESCALE|}, ${name:value});$0"
        ],
        "description": "llSetVehicleFloatParam( integer param, float value );\n\n 233 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the vehicle float parameter param to value.\n• integer param – VEHICLE_* flag\n• float value\n"
    },
    "llSetTextureAnim": {
        "prefix": "llSetTextureAnim",
        "body": [
           "llSetTextureAnim(${1|ANIM_ON,LOOP,REVERSE,PING_PONG,SMOOTH,SCALE|}, ${name:face}, ${name:sizex}, ${name:sizey}, ${name:start}, ${name:length}, ${name:rate});$0"
        ],
        "description": "llSetTextureAnim( integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate );\n\n 211 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nAnimate the texture on the specified face/faces by setting the texture scale and offset.\n• integer mode – mask of Mode flags\n• integer face – face number or ALL_SIDES\n• integer sizex – horizontal frames (ignored for ROTATE and SCALE)\n• integer sizey – vertical frames (ignored for ROTATE and SCALE)\n• float start – Start position/frame number (or radians for ROTATE)\n• float length – number of frames to display (or radians for ROTATE)\n• float rate – frames per second (must not be zero)\nIf face is ALL_SIDES then the function works on all sides.\nstart supports negative indexes.\nFrames are numbered from left to right, top to bottom, starting at 0.If rate is negative, it has the same effect as using the REVERSE flag.\n"
    },
    "llGetHTTPHeader": {
        "prefix": "llGetHTTPHeader",
        "body": [
           "llGetHTTPHeader(${name:request_id}, ${name:header}$0)"
        ],
        "description": "string llGetHTTPHeader( key request_id, string header );\n\n 349 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the value for header for request_id.\n• key request_id – A valid HTTP request key.\n• string header – Lower case header value name.\nReturns an empty string if the header is not found or if the headers can no longer be accessed. Headers can only be accessed before llHTTPResponse is called and with-in the first 30 seconds after the http_request event is queued.\n"
    },
    "llGetLinkKey": {
        "prefix": "llGetLinkKey",
        "body": [
           "llGetLinkKey(${name:link}$0)"
        ],
        "description": "key llGetLinkKey( integer link );\n\n 144 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the key of the linked prim link\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag \n"
    },
    "llDetectedTouchBinormal": {
        "prefix": "llDetectedTouchBinormal",
        "body": [
           "llDetectedTouchBinormal(${name:index}$0)"
        ],
        "description": "vector llDetectedTouchBinormal( integer index );\n\n 341 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the surface binormal (tangent to the surface, pointing along the positive T (V) direction of tangent space) where the touch event was triggered. Along with llDetectedTouchNormal, this information can be used to find the tangent space at the touch location.\n• integer index – Index of detection information\nindex does not support negative indexes.\nFor the touch category of events only. The prim that was touched may not be the prim receiving the event, use llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace to determine which face was touched.To find the third tangent vector, cross this vector with the normal.\n"
    },
    "llGetExperienceDetails": {
        "prefix": "llGetExperienceDetails",
        "body": [
           "llGetExperienceDetails(${name:experience_id}$0)"
        ],
        "description": "list llGetExperienceDetails( key experience_id );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a list of details about the experience. This list has 6 components: [string experience_name, key owner_id, key experience_id, integer state, string state_message, key group_id]\n• key experience_id – The ID of the experience to query.\nIf experience_id is NULL_KEY, then information about the script's experience is returned. In this situation, if the script isn't associated with an experience, an empty list is returned.\n"
    },
    "llRequestURL": {
        "prefix": "llRequestURL",
        "body": [
           "llRequestURL($0)"
        ],
        "description": "key llRequestURL( );\n\n 345 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRequests one HTTP:// url for use by this script. The http_request event is triggered with the result of the request. HTTP-in uses port 12046.Returns a handle (a key) used for identifying the result of the request in the http_request event."
    },
    "llGetOmega": {
        "prefix": "llGetOmega",
        "body": [
           "llGetOmega($0)"
        ],
        "description": "vector llGetOmega( );\n\n 79 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the rotation velocity of the object in radians per second."
    },
    "llRequestUserKey": {
        "prefix": "llRequestUserKey",
        "body": [
           "llRequestUserKey(${name:username}$0)"
        ],
        "description": "key llRequestUserKey( string username );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nRequests the Agent ID for the agent identified by name from the dataserver. The name given may be either the current name of an avatar or a historical name that has been used in the past. If no agent can be found with the supplied name this function returns the value NULL_KEY. \nReturns a handle (a key) that can be used to identify the request when the dataserver event is raised. \nThe agent being searched for with this function does not need to be signed on to Second Life.Returns a key \n• string username – the username of the avatar to retrieve the UUID of.\n"
    },
    "llGetInventoryType": {
        "prefix": "llGetInventoryType",
        "body": [
           "llGetInventoryType(${name:name}$0)"
        ],
        "description": "integer llGetInventoryType( string name );\n\n 301 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the type of the inventory item name\n• string name – name of an inventory item\nIf name does not exist, INVENTORY_NONE is returned (no errors or messages are generated), making this function ideal for testing the existence of inventory.\n"
    },
    "llCastRay": {
        "prefix": "llCastRay",
        "body": [
           "llCastRay(${name:start}, ${name:end}, ${3|RC_REJECT_TYPES,RC_DATA_FLAGS,RC_MAX_HITS,RC_DETECT_PHANTOM|}$0)"
        ],
        "description": "list llCastRay( vector start, vector end, list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nCast a line from start to end and report collision data for intersections with objectsReturns a list of strided values with an additional integer status_code on the end. Each stride consists of two mandatory values {key uuid, vector position} and possibly some optional values {integer link_number, vector normal} see RC_DATA_FLAGS for details. The status_code if it is negative is an error code, otherwise it is the number of hits (and strides) returned.\n• vector start – starting location\n• vector end – ending location\n• list options – can consists of any number of option flags and their parameters.\n"
    },
    "llGetFreeURLs": {
        "prefix": "llGetFreeURLs",
        "body": [
           "llGetFreeURLs($0)"
        ],
        "description": "integer llGetFreeURLs( );\n\n 344 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the number of available URLs."
    },
    "llReleaseControls": {
        "prefix": "llReleaseControls",
        "body": [
           "llReleaseControls();$0"
        ],
        "description": "llReleaseControls( );\n\n 112 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nStop taking inputs (that were taken with llTakeControls), dequeues any remaining control events. If PERMISSION_TAKE_CONTROLS was previously granted, it will be revoked."
    },
    "llGetLinkNumber": {
        "prefix": "llGetLinkNumber",
        "body": [
           "llGetLinkNumber($0)"
        ],
        "description": "integer llGetLinkNumber( );\n\n 139 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the link number of the prim containing the script.0 means the prim is not linked, 1 the prim is the root, 2 the prim is the first child, etc. Links are numbered in the reverse order in which they were linked -- if you select a box, a sphere and a cylinder in that order, then link them, the cylinder is 1, the sphere is 2 and the box is 3. The last selected prim has the lowest link number.\n"
    },
    "llAtan2": {
        "prefix": "llAtan2",
        "body": [
           "llAtan2(${name:y}, ${name:x}$0)"
        ],
        "description": "float llAtan2( float y, float x );\n\n 3 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the arctangent2 of y, x.\n• float y\n• float x\nSimilar to the arctangent(y/x) except it utilizes the signs of x & y to determine the quadrant and avoids division by zero. \n"
    },
    "llAddToLandBanList": {
        "prefix": "llAddToLandBanList",
        "body": [
           "llAddToLandBanList(${name:avatar}, ${name:hours});$0"
        ],
        "description": "llAddToLandBanList( key avatar, float hours );\n\n 310 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nAdd avatar to the land ban list for hours, or indefinitely if hours is zero.\n• key avatar – avatar UUID\n• float hours\n"
    },
    "llGetMinScaleFactor": {
        "prefix": "llGetMinScaleFactor",
        "body": [
           "llGetMinScaleFactor($0)"
        ],
        "description": "float llGetMinScaleFactor( );\n\n ? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the smallest scaling factor that can be used with llScaleByFactor to resize the object. This minimum is determined by the prim scale limits."
    },
    "llPushObject": {
        "prefix": "llPushObject",
        "body": [
           "llPushObject(${name:target}, ${name:impulse}, ${name:ang_impulse}, ${4|TRUE,FALSE|});$0"
        ],
        "description": "llPushObject( key target, vector impulse, vector ang_impulse, integer local );\n\n 165 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nApplies impulse and ang_impulse to object target\n• key target – group, avatar or object UUID that is in the same region\n• vector impulse – Direction and force of push. Direction is affected by local.\n• vector ang_impulse – Rotational force.\n• integer local – boolean, if TRUE uses the local axis of target, if FALSE uses the region axis.\n"
    },
    "llGetInventoryPermMask": {
        "prefix": "llGetInventoryPermMask",
        "body": [
           "llGetInventoryPermMask(${name:item}, ${2|MASK_BASE,MASK_OWNER,MASK_GROUP,MASK_EVERYONE,MASK_NEXT|}$0)"
        ],
        "description": "integer llGetInventoryPermMask( string item, integer category );\n\n 289 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a bit field (an integer) of the requested permission category for the inventory item\n• string item – an item in the inventory of the prim this script is in\n• integer category – MASK_* flag\n"
    },
    "llReplaceAgentEnvironment": {
        "prefix": "llReplaceAgentEnvironment",
        "body": [
           "llReplaceAgentEnvironment(${name:agent_id}, ${name:transition}, ${name:environment});$0"
        ],
        "description": "Integer llReplaceAgentEnvironment( key agent_id, float transition, string environment );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nThe llReplaceAgentEnvironment function overrides the current region and parcel environment seen by an agent. The new environment persists until the agent crosses to a new region or this function is called with the NULL_KEY or empty string in the environment parameter for the particular agent, doing so will strip all environmental settings applied to this agent as part of the experience. This function must be executed as part of an experience.Returns an Integer \n• key agent_id – The key for an agent in the region. The agent must be in the region and must be participating in the experience.\n• float transition – The number of seconds over which to transition to the new settings.\n• string environment – The name of an environmental setting in the object's inventory or the asset ID for an environment.\n"
    },
    "llSetSoundRadius": {
        "prefix": "llSetSoundRadius",
        "body": [
           "llSetSoundRadius(${name:radius});$0"
        ],
        "description": "llSetSoundRadius( float radius );\n\n 209 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nEstablishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered).\n• float radius – in meters\n"
    },
    "llSetRegionPos": {
        "prefix": "llSetRegionPos",
        "body": [
           "llSetRegionPos(${name:position}$0)"
        ],
        "description": "integer llSetRegionPos( vector position );\n\n ? Function ID\n 0.0 Forced Delay\n 0.0 Energy\n\nTries to move the entire object so that the root prim is within 0.1m of position.Returns an integer boolean, TRUE if the object is successfully placed within 0.1 m of position, FALSE otherwise. See #Specification for details.\n• vector position – position in region coordinates\nOnly if TRUE is returned does the object move, if FALSE is returned, the object does not change position.\n"
    },
    "llSetSoundQueueing": {
        "prefix": "llSetSoundQueueing",
        "body": [
           "llSetSoundQueueing(${1|TRUE,FALSE|});$0"
        ],
        "description": "llSetSoundQueueing( integer queue );\n\n 208 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSet whether attached sounds wait for the current sound to finish. If queue is TRUE, queuing is enabled, if FALSE queuing is disabled. Sound queuing is disabled by default.\n• integer queue – boolean, sound queuing: TRUE enables, FALSE (default) disables\n"
    },
    "llSetLocalRot": {
        "prefix": "llSetLocalRot",
        "body": [
           "llSetLocalRot(${name:rot});$0"
        ],
        "description": "llSetLocalRot( rotation rot );\n\n 284 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nSets the rotation of a child prim relative to the root prim\n• rotation rot\n"
    },
    "llSetPayPrice": {
        "prefix": "llSetPayPrice",
        "body": [
           "llSetPayPrice(${name:price}, ${name:quick_pay_buttons});$0"
        ],
        "description": "llSetPayPrice( integer price, list quick_pay_buttons );\n\n 302 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSuggest default amounts for the pay text field and pay buttons of the appearing dialog when someone chooses to pay this object.\n• integer price – PAY_* constant or positive value\n• list quick_pay_buttons – Four PAY_* constants and/or positive integer values\n"
    },
    "llSetVehicleVectorParam": {
        "prefix": "llSetVehicleVectorParam",
        "body": [
           "llSetVehicleVectorParam(${1|VEHICLE_ANGULAR_FRICTION_TIMESCALE,VEHICLE_ANGULAR_MOTOR_DIRECTION,VEHICLE_LINEAR_FRICTION_TIMESCALE,VEHICLE_LINEAR_MOTOR_DIRECTION,VEHICLE_LINEAR_MOTOR_OFFSET|}, ${name:vec});$0"
        ],
        "description": "llSetVehicleVectorParam( integer param, vector vec );\n\n 234 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the vehicle vector parameter param to vec.\n• integer param – VEHICLE_* flag\n• vector vec\n"
    },
    "llSetSitText": {
        "prefix": "llSetSitText",
        "body": [
           "llSetSitText(${name:text});$0"
        ],
        "description": "llSetSitText( string text );\n\n 242 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nDisplays text rather than the default \"Sit Here\" in the right-click menu.\n• string text\n"
    },
    "llSetLinkTexture": {
        "prefix": "llSetLinkTexture",
        "body": [
           "llSetLinkTexture(${1|LINK_ROOT,LINK_SET,LINK_ALL_OTHERS,LINK_ALL_CHILDREN,LINK_THIS|}, ${name:texture}, ${3|integer face,ALL_SIDES|});$0"
        ],
        "description": "llSetLinkTexture( integer link, string texture, integer face );\n\n 329 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nIf a prim exists in the link set at link, set texture on face of that prim.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag \n• string texture – a texture in the inventory of the prim this script is in or a UUID of a texture\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llSetStatus": {
        "prefix": "llSetStatus",
        "body": [
           "llSetStatus(${1|STATUS_PHYSICS,STATUS_ROTATE_X,STATUS_ROTATE_Y,STATUS_ROTATE_Z,STATUS_PHANTOM,STATUS_SANDBOX,STATUS_BLOCK_GRAB,STATUS_DIE_AT_EDGE,STATUS_RETURN_AT_EDGE,STATUS_CAST_SHADOWS,STATUS_BLOCK_GRAB_OBJECT|}, ${2|TRUE,FALSE|});$0"
        ],
        "description": "llSetStatus( integer status, integer value );\n\n 45 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the object status attributes indicated in the status} mask to value\n• integer status – bit mask, STATUS_* flags\n• integer value – boolean,  TRUE enables, FALSE disables\n"
    },
    "llSitOnLink": {
        "prefix": "llSitOnLink",
        "body": [
           "llSitOnLink(${name:agent_id}, ${2|integer link,LINK_ROOT,LINK_THIS|});$0"
        ],
        "description": "Integer llSitOnLink( key agent_id, integer link );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nThe avatar specified by agent_id is forced to sit on the sit target of the prim indicated by the link parameter. If the specified link is already occupied, the simulator searches down the chain of prims in the link set looking for an available sit target.Returns an Integer \n• key agent_id – UUID of the avatar being forced to sit\n• integer link – Link number for the prim containing the desired sit target\nIf successful, this method returns 1. \nIf the function fails, it returns a negative number constant.\nLink constants that indicate a single prim may be used for the link parameter. These are LINK_ROOT and LINK_THIS. Other constants such as LINK_SET, LINK_CHILDREN, LINK_ALL_OTHERS will return an INVALID_LINK error.\nThis method must be called from an experience enabled script running on land that has enabled the experience key. If these conditions are not met this method returns a NOT_EXPERIENCE error.\nThe targeted avatar must also have accepted the experience. If the user is not participating in the experience this method returns NO_EXPERIENCE_PERMISSION. If the avatar id can not be found or is not over land that has enabled the experience this method returns INVALID_AGENT.\nIf there are no valid sit targets remaining in the linkset this method returns NO_SIT_TARGET and no action is taken with the avatar.\nIf the avatar does not have access to the parcel containing the prim running this script, this call fails.\n"
    },
    "llSetTouchText": {
        "prefix": "llSetTouchText",
        "body": [
           "llSetTouchText(${name:text});$0"
        ],
        "description": "llSetTouchText( string text );\n\n 241 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nDisplays text rather than the default \"Touch\" in the right-click menu\n• string text\nThis is very similar to LlSetSitText.\nTo restore the default value, use an empty string for text.\nTo make it appear as if there is no text, use some combination of whitespace characters for text.\n"
    },
    "llSin": {
        "prefix": "llSin",
        "body": [
           "llSin(${name:theta}$0)"
        ],
        "description": "float llSin( float theta );\n\n 0 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the sine of theta.\n• float theta – angle expressed in radians\n"
    },
    "llRequestExperiencePermissions": {
        "prefix": "llRequestExperiencePermissions",
        "body": [
           "llRequestExperiencePermissions(${name:agent}, ${name:name});$0"
        ],
        "description": "llRequestExperiencePermissions( key agent, string name );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nAsks the agent for permission to participate in the script's Experience.\n• key agent – Key of the agent to request permissions from\n• string name – Deprecated, no longer used\nThis request is similar to llRequestPermissions with all the following permissions: PERMISSION_TAKE_CONTROLS, PERMISSION_TRIGGER_ANIMATION, PERMISSION_ATTACH, PERMISSION_TRACK_CAMERA, PERMISSION_CONTROL_CAMERA and PERMISSION_TELEPORT. However, unlike llRequestPermissions, the decision to allow or block the request is persistent and applies to all scripts using the experience grid-wide. \nSubsequent calls to llRequestExperiencePermissions from scripts in the experience will receive the same response automatically with no user interaction. \nEither experience_permissions or experience_permissions_denied will be generated in response to this call. If no response is given by the agent, the request will time out after at least 5 minutes. Multiple requests by the same script can be made during this time out though the script can only have permission for one agent at a time.  \nAgents in god mode will always see the permission dialog even if the experience has been previously approved. \nOutstanding permission requests will be lost if the script is de-rezzed, moved to another region, or reset.For this function to work, the script must be compiled into an Experience."
    },
    "llMakeSmoke": {
        "prefix": "llMakeSmoke",
        "body": [
           "llMakeSmoke(DEPRACATED, Avoid Use);$0"
        ],
        "description": "llMakeSmoke( integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset );\n\n 102 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nMake smoke like particles\n• integer particles\n• float scale\n• float vel\n• float lifetime\n• float arc\n• string texture – a texture in the inventory of the prim this script is in or a UUID of a texture\n• vector offset – offset relative to the prim's position and expressed in local coordinates and is completely ignored.\n"
    },
    "llLoopSoundSlave": {
        "prefix": "llLoopSoundSlave",
        "body": [
           "llLoopSoundSlave(${name:sound}, ${name:volume});$0"
        ],
        "description": "llLoopSoundSlave( string sound, float volume );\n\n 89 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPlays attached sound looping at volume, synced to most audible sync master declared by llLoopSoundMaster.\n• string sound – a sound in the inventory of the prim this script is in or a UUID of a sound\n• float volume – between 0.0 (silent) and 1.0 (loud) (0.0 <= volume <= 1.0)\n"
    },
    "llLoadURL": {
        "prefix": "llLoadURL",
        "body": [
           "llLoadURL(${name:avatar}, ${name:message}, ${name:url});$0"
        ],
        "description": "llLoadURL( key avatar, string message, string url );\n\n 297 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nShows dialog to avatar offering to load web page at url with message.If user clicks yes, launches the page in their web browser, starting the browser if required.\n• key avatar – avatar UUID that is in the same region\n• string message – message to be displayed in the dialog box\n• string url\nThe url is truncated to 255 characters and message is truncated to 254 characters.The protocol for the url must be specified, currently only \"https://\" and \"http://\" are supported.The URL should be RFC-1738 compliant with proper escapes.\n"
    },
    "llList2Vector": {
        "prefix": "llList2Vector",
        "body": [
           "llList2Vector(${name:src}, ${name:index}$0)"
        ],
        "description": "vector llList2Vector( list src, integer index );\n\n 190 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is at index in src.\n• list src – List containing the element of interest.\n• integer index – Index of the element of interest.\nindex supports negative indexes.\nIf index describes a location not in src then ZERO_VECTOR is returned.\nIf the type of the element at index in src is not a vector then ZERO_VECTOR is returned. \nHere is a workaround: (vector)llList2String(src, index);"
    },
    "llMakeFire": {
        "prefix": "llMakeFire",
        "body": [
           "llMakeFire(DEPRACATED, Avoid Use);$0"
        ],
        "description": "llMakeFire( integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset );\n\n 103 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nMake fire like particles\n• integer particles\n• float scale\n• float vel\n• float lifetime\n• float arc\n• string texture – a texture in the inventory of the prim this script is in or a UUID of a texture\n• vector offset – offset relative to the prim's position and expressed in local coordinates and is completely ignored.\n"
    },
    "llLookAt": {
        "prefix": "llLookAt",
        "body": [
           "llLookAt(${name:target}, ${name:strength}, ${name:damping});$0"
        ],
        "description": "llLookAt( vector target, float strength, float damping );\n\n 105 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nCause object to point its up axis (positive z) towards target, while keeping its forward axis (positive x) below the horizon.\nContinues to track target until llStopLookAt is called.\n• vector target – position in region coordinates\n• float strength\n• float damping – seconds to critically damp in\nTo change the position in the same manner use llMoveToTarget.\n"
    },
    "llLoopSoundMaster": {
        "prefix": "llLoopSoundMaster",
        "body": [
           "llLoopSoundMaster(${name:sound}, ${name:volume});$0"
        ],
        "description": "llLoopSoundMaster( string sound, float volume );\n\n 88 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPlays attached sound looping at volume, declares it a sync master.\n• string sound – a sound in the inventory of the prim this script is in or a UUID of a sound\n• float volume – between 0.0 (silent) and 1.0 (loud) (0.0 <= volume <= 1.0)\n"
    },
    "llGetNumberOfSides": {
        "prefix": "llGetNumberOfSides",
        "body": [
           "llGetNumberOfSides($0)"
        ],
        "description": "integer llGetNumberOfSides( );\n\n 168 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the number of faces (or sides) of the prim.See Face for more information about faces and the conditions that control the number of faces a prim will have.\n"
    },
    "llGetMoonDirection": {
        "prefix": "llGetMoonDirection",
        "body": [
           "llGetMoonDirection($0)"
        ],
        "description": "vector llGetMoonDirection( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a normalized vector to the current moon position at the location of object containing the script. llGetMoonDirection is the vector to the parcel's moon, llGetRegionMoonDirection is the vector to region's moon. If there is no custom environment set for the current parcel llGetMoonDirection returns the direction to the region's moon. These functions are altitude aware.Returns a vector "
    },
    "llGetOwner": {
        "prefix": "llGetOwner",
        "body": [
           "llGetOwner($0)"
        ],
        "description": "key llGetOwner( );\n\n 117 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a key that is the object owner's UUID."
    },
    "llGetLocalPos": {
        "prefix": "llGetLocalPos",
        "body": [
           "llGetLocalPos($0)"
        ],
        "description": "vector llGetLocalPos( );\n\n 60 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the position relative (local) to the root.If called from the root prim it returns the position in the region unless it is attached to which it returns the position relative to the attach point.\n"
    },
    "llRegionSayTo": {
        "prefix": "llRegionSayTo",
        "body": [
           "llRegionSayTo(${name:target}, ${name:channel}, ${name:msg});$0"
        ],
        "description": "llRegionSayTo( key target, integer channel, string msg );\n\n 363 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSays the text supplied in string msg on channel supplied in integer channel to the object or avatar specified by target\n• key target – group, avatar or prim UUID that is in the same region\n• integer channel\n• string msg\n"
    },
    "llGetMassMKS": {
        "prefix": "llGetMassMKS",
        "body": [
           "llGetMassMKS($0)"
        ],
        "description": "float llGetMassMKS( );\n\n ?? Function ID\n 0.0 Forced Delay\n ?? Energy\n\nReturns a float that is the mass (in Kilograms) of object that script is attached to. Functionally identical to llGetMass except for the unit used in the return value."
    },
    "llSound": {
        "prefix": "llSound",
        "body": [
           "llSound(DEPRECATED, Avoid Use);$0"
        ],
        "description": "llSound( string sound, float volume, integer queue, integer loop );\n\n 85 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPlays sound at volume and whether it should loop or not.\n• string sound – a sound in the inventory of the prim this script is in or a UUID of a sound\n• float volume – between 0.0 (silent) and 1.0 (loud) (0.0 <= volume <= 1.0)\n• integer queue – boolean, whether or not to queue the song (TRUE) or interrupt the playing song (FALSE).\n• integer loop – boolean, whether or not to loop the song.\n"
    },
    "llGetNumberOfPrims": {
        "prefix": "llGetNumberOfPrims",
        "body": [
           "llGetNumberOfPrims($0)"
        ],
        "description": "integer llGetNumberOfPrims( );\n\n 275 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the number of prims in a link set the script is attached to."
    },
    "llMapDestination": {
        "prefix": "llMapDestination",
        "body": [
           "llMapDestination(${name:simname}, ${name:pos}, ${name:look_at});$0"
        ],
        "description": "llMapDestination( string simname, vector pos, vector look_at );\n\n 309 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nOpens world map centered on simname with pos highlighted.Only works for scripts attached to avatar, or during touch events.\n• string simname – Region name\n• vector pos – position in region coordinates\n• vector look_at – position in local coordinates (not used)\n(NOTE: look_at currently does nothing)\n"
    },
    "llMessageLinked": {
        "prefix": "llMessageLinked",
        "body": [
           "llMessageLinked(${1|integer link,LINK_ROOT,LINK_SET,LINK_ALL_OTHERS,LINK_ALL_CHILDREN,LINK_THIS|}, ${name:num}, ${name:str}, ${name:id});$0"
        ],
        "description": "llMessageLinked( integer link, integer num, string str, key id );\n\n 164 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nThe purpose of this function is to allow scripts in the same object to communicate. It triggers a link_message event with the same parameters num, str, and id in all scripts in the prim(s) described by link.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag, controls which prim(s) receive the link_message. \n• integer num – Value of the second parameter of the resulting link_message event.\n• string str – Value of the third parameter of the resulting link_message event.\n• key id – Value of the fourth parameter of the resulting link_message event.You can use id as a second string field. The sizes of str and id are only limited by available script memory."
    },
    "llAxisAngle2Rot": {
        "prefix": "llAxisAngle2Rot",
        "body": [
           "llAxisAngle2Rot(${name:axis}, ${name:angle}$0)"
        ],
        "description": "rotation llAxisAngle2Rot( vector axis, float angle );\n\n 169 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a rotation that is a generated angle about axis\n• vector axis\n• float angle – expressed in radians.\naxis need not be normalized, only the direction is important.            \nangle need to be between the value 0<angle<PI (higher values than PI lead to 2*PI-angle)\n, because a rotation is not really a rotation (it is more of a rigid motion/mirroring) \n,the final destination is the rotation. \n(in other words: it doesn't matter wether you rotate left by 90 degrees or right by 270 degrees it will return the same rotation)\n"
    },
    "llSetVelocity": {
        "prefix": "llSetVelocity",
        "body": [
           "llSetVelocity(${name:force}, ${2|TRUE,FALSE|});$0"
        ],
        "description": "llSetVelocity( vector force, integer local );\n\n ??? Function ID\n 0.0 Forced Delay\n ??? Energy\n\nApplies velocity to object\n• vector force\n• integer local – boolean, if TRUE force is treated as a local directional vector, if FALSE force is treated as a region directional vector\nInstantaneous velocity not dependent on object energy or mass. llSetForce has continuous push.\n"
    },
    "llAdjustSoundVolume": {
        "prefix": "llAdjustSoundVolume",
        "body": [
           "llAdjustSoundVolume(${name:volume});$0"
        ],
        "description": "llAdjustSoundVolume( float volume );\n\n 207 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nAdjusts volume of attached sound.\n• float volume – between 0.0 (silent) and 1.0 (loud) (0.0 <= volume <= 1.0)\n"
    },
    "llCos": {
        "prefix": "llCos",
        "body": [
           "llCos(${name:theta}$0)"
        ],
        "description": "float llCos( float theta );\n\n 1 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the cosine of theta.\n• float theta – angle expressed in radians\n"
    },
    "llAttachToAvatarTemp": {
        "prefix": "llAttachToAvatarTemp",
        "body": [
           "llAttachToAvatarTemp(${1|ATTACH_HEAD,ATTACH_NOSE,ATTACH_MOUTH,ATTACH_FACE_TONGUE,ATTACH_CHIN,ATTACH_FACE_JAW,ATTACH_LEAR,ATTACH_REAR,ATTACH_FACE_LEAR,ATTACH_FACE_REAR,ATTACH_LEYE,ATTACH_REYE,ATTACH_FACE_LEYE,ATTACH_FACE_REYE,ATTACH_NECK,ATTACH_LSHOULDER,ATTACH_RSHOULDER,ATTACH_LUARM,ATTACH_RUARM,ATTACH_LLARM,ATTACH_RLARM,ATTACH_LHAND,ATTACH_RHAND,ATTACH_LHAND_RING1,ATTACH_RHAND_RING1,ATTACH_LWING,ATTACH_RWING,ATTACH_CHEST,ATTACH_LEFT_PEC,ATTACH_RIGHT_PEC,ATTACH_BELLY,ATTACH_BACK,ATTACH_TAIL_BASE,ATTACH_TAIL_TIP,ATTACH_AVATAR_CENTER,ATTACH_PELVIS,ATTACH_GROIN,ATTACH_LHIP,ATTACH_RHIP,ATTACH_LULEG,ATTACH_RULEG,ATTACH_RLLEG,ATTACH_LLLEG,ATTACH_LFOOT,ATTACH_RFOOT,ATTACH_HIND_LFOOT,ATTACH_HIND_RFOOT,ATTACH_HUD_CENTER_2,ATTACH_HUD_TOP_RIGHT,ATTACH_HUD_TOP_CENTER,ATTACH_HUD_TOP_LEFT,ATTACH_HUD_CENTER_1,ATTACH_HUD_BOTTOM_LEFT,ATTACH_HUD_BOTTOM,ATTACH_HUD_BOTTOM_RIGHT|});$0"
        ],
        "description": "llAttachToAvatarTemp( integer attach_point );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nFollows the same convention as llAttachToAvatar, with the exception that the object will not create new inventory for the user, and will disappear on detach or disconnect. Also, this function can be used on avis other than the owner (if granted permission) in which case the ownership is changed to the new wearer.\n• integer attach_point – ATTACH_* constant or valid value (see the tables below)To run this function the script must request the PERMISSION_ATTACH permission with llRequestPermissions.\nIt should be noted that when an object is attached temporarily, a user cannot 'take' or 'drop' the object that is attached to them. \nThe user does not have to be the owner of the object in advance; this function transfers ownership automatically (the usual permissions required to transfer objects apply).\n"
    },
    "llBase64ToInteger": {
        "prefix": "llBase64ToInteger",
        "body": [
           "llBase64ToInteger(${name:str}$0)"
        ],
        "description": "integer llBase64ToInteger( string str );\n\n 281 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is str Base64 decoded as a big endian integer.\n• string str – Base64 string\n"
    },
    "llListRandomize": {
        "prefix": "llListRandomize",
        "body": [
           "llListRandomize(${name:src}, ${name:stride}$0)"
        ],
        "description": "list llListRandomize( list src, integer stride );\n\n 197 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list which is a randomized permutation of src.\n• list src – A list you want to randomize.\n• integer stride – number of entries per stride, if less than 1 it is assumed to be 1This function supports Strided Lists."
    },
    "llRotateTexture": {
        "prefix": "llRotateTexture",
        "body": [
           "llRotateTexture(${name:angle}, ${2|integer face,ALL_SIDES|});$0"
        ],
        "description": "llRotateTexture( float angle, integer face );\n\n 56 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nSets the texture rotation of the chosen face to angle.\n• float angle – angle expressed in radians\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llRot2Fwd": {
        "prefix": "llRot2Fwd",
        "body": [
           "llRot2Fwd(${name:rotation}$0)"
        ],
        "description": "vector llRot2Fwd( rotation q );\n\n 18 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nComputes the orientation of the local x-axis relative to the parent (i.e. the root prim or the world).Returns a vector that is the forward vector defined by q, i.e. a unit vector pointing in the local positive X direction.\n• rotation q\n"
    },
    "llListStatistics": {
        "prefix": "llListStatistics",
        "body": [
           "llListStatistics(${1|LIST_STAT_RANGE,LIST_STAT_MIN,LIST_STAT_MAX,LIST_STAT_MEAN,LIST_STAT_MEDIAN,LIST_STAT_STD_DEV,LIST_STAT_SUM,LIST_STAT_SUM_SQUARES,LIST_STAT_NUM_COUNT,LIST_STAT_GEOMETRIC_MEAN|}, ${name:src}$0)"
        ],
        "description": "float llListStatistics( integer operation, list src );\n\n 315 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the result of performing statistical aggregate function operation on src.\n• integer operation – a LIST_STAT_* flag\n• list src\nIf a list entry type is not a float or an integer it is silently ignored.\n"
    },
    "llStopObjectAnimation": {
        "prefix": "llStopObjectAnimation",
        "body": [
           "llStopObjectAnimation(${name:anim});$0"
        ],
        "description": "llStopObjectAnimation( string anim );\n\n 505 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nStop an animation for the current object.\n• string anim – name of an animation in the inventory of the current object, or an animation uuid\n"
    },
    "llRound": {
        "prefix": "llRound",
        "body": [
           "llRound(${name:val}$0)"
        ],
        "description": "integer llRound( float val );\n\n 11 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the integer that val is closest to.\n• float val – Any valid float value\nIf the absolute value of the tenths position is 4 or less, val is rounded off; otherwise, val is rounded towards positive infinity.\n"
    },
    "llSoundPreload": {
        "prefix": "llSoundPreload",
        "body": [
           "llSoundPreload(${name:sound});$0"
        ],
        "description": "llSoundPreload( string sound );\n\n 126 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPreloads sound on viewers within range.\n• string sound – a sound in the inventory of the prim this script is in or a UUID of a sound\n"
    },
    "llSqrt": {
        "prefix": "llSqrt",
        "body": [
           "llSqrt(${name:val}$0)"
        ],
        "description": "float llSqrt( float val );\n\n 4 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the square root of val.\n• float val – positive number (val >= 0.0)\nFor imaginary results (val < 0.0), a Math Error is triggered under LSO , or 'NaN' (Not A Number) is returned under Mono\n"
    },
    "llEscapeURL": {
        "prefix": "llEscapeURL",
        "body": [
           "llEscapeURL(${name:url}$0)"
        ],
        "description": "string llEscapeURL( string url );\n\n 307 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the escaped/encoded version of url, replacing spaces with \"%20\" etc. The function will escape any character not in [a-zA-Z0-9] to \"%xx\" where \"xx\" is the hexadecimal value of the character in UTF-8 byte form.\n• string url – A (preferably valid and unescaped URL) string.\nTo clarify, numbers and ASCII7 alphabetical characters are NOT escaped. If a character requires more then one byte in UTF-8 byte form then it returns multiple \"%xx\" sequences chained together.\n This function is similar to functions (e.g. rawurlencode, encodeURIComponent) found in many other languages:  PHP rawurlencode ECMAScript encodeURIComponent\n"
    },
    "llGetRegionAgentCount": {
        "prefix": "llGetRegionAgentCount",
        "body": [
           "llGetRegionAgentCount($0)"
        ],
        "description": "integer llGetRegionAgentCount( );\n\n 334 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the number of avatars in the region."
    },
    "llGetMoonRotation": {
        "prefix": "llGetMoonRotation",
        "body": [
           "llGetMoonRotation($0)"
        ],
        "description": "rotation llGetMoonRotation( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturn the rotation applied to the moon for the parcel at the location of the object containing the script. These function are altitude aware and so will pick up the moon for their current track. llGetRegionMoonRotation returns the rotation applied at the region level, llGetMoonRotation does the same for the parcel. If there is no custom environment applied to parcel llGetMoonRotation returns the same value as llGetRegionMoonRotation.Returns a rotation "
    },
    "llSameGroup": {
        "prefix": "llSameGroup",
        "body": [
           "llSameGroup(${name:uuid}$0)"
        ],
        "description": "integer llSameGroup( key uuid );\n\n 219 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a boolean (an integer) that is TRUE if uuid and the prim the script is in are of the same group, otherwise FALSE.\n• key uuid – group, avatar or prim UUID that is in the same region\nThis function compares the group-uuid of the prim containing the script to that of the group-uuid of what uuid describes.\nIt answers these two questions:\n\"Is the script's prim in the same group as uuid?\"\"Is the group-uuid of the script's prim equal to uuid?\"\n"
    },
    "llGetNumberOfNotecardLines": {
        "prefix": "llGetNumberOfNotecardLines",
        "body": [
           "llGetNumberOfNotecardLines(${name:name}$0)"
        ],
        "description": "key llGetNumberOfNotecardLines( string name );\n\n 276 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nRequests the number of lines in notecard name via the dataserver event (cast dataserver value to integer)Returns the handle (a key) for a dataserver event response.\n• string name – a notecard in the inventory of the prim this script is in or a UUID of a notecard\n"
    },
    "llToUpper": {
        "prefix": "llToUpper",
        "body": [
           "llToUpper(${name:src}$0)"
        ],
        "description": "string llToUpper( string src );\n\n 97 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is src with all upper-case characters.\n• string src\nThe opposite is llToLower.\n"
    },
    "llRotLookAt": {
        "prefix": "llRotLookAt",
        "body": [
           "llRotLookAt(${name:target_direction}, ${name:strength}, ${name:damping});$0"
        ],
        "description": "llRotLookAt( rotation target_direction, float strength, float damping );\n\n 127 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nCauses an object to smoothly rotate to target_direction with strength resistance at damping force.\nMaintains rotation target_direction until stopped with llStopLookAt.\n• rotation target_direction\n• float strength\n• float damping – seconds to critically damp in\nTo change the position in the same manner, use llMoveToTarget. For physical objects a range between .2 and 1 is good for both parameters.\n"
    },
    "llSensor": {
        "prefix": "llSensor",
        "body": [
           "llSensor(${name:name}, ${name:id}, ${3|AGENT_BY_LEGACY_NAME,AGENT,AGENT_BY_USERNAME,ACTIVE,PASSIVE,SCRIPTED|}, ${name:radius}, ${name:arc});$0"
        ],
        "description": "llSensor( string name, key id, integer type, float radius, float arc );\n\n 28 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPerforms a single scan for name and id with type within radius meters and arc radians of forward vector\n• string name – object or avatar name!\n• key id – group, avatar or object UUID that is in the same region\n• integer type – mask (AGENT, AGENT_BY_LEGACY_NAME, AGENT_BY_USERNAME, ACTIVE, PASSIVE, and/or SCRIPTED)\n• float radius – distance from center [0.0, 96.0m]\n• float arc – the max angle between the local x-axis of the prim and detectable objects, range 0.0 to PI\nIf name and/or id are empty, they are ignored.If id is an invalid key or NULL_KEY it is treated as empty.Depending upon which AGENT* flag is used determines the format requirements for name\nSee: llSensor for an excellent explanation of arc.\n"
    },
    "llSetTimerEvent": {
        "prefix": "llSetTimerEvent",
        "body": [
           "llSetTimerEvent(${name:sec});$0"
        ],
        "description": "llSetTimerEvent( float sec );\n\n 107 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nCause the timer event to be triggered a maximum of once every sec seconds. Passing in 0.0 stops further timer events.\n• float sec – Any positive non-zero value to enable, zero (0.0) to disable.\n"
    },
    "llGetNextEmail": {
        "prefix": "llGetNextEmail",
        "body": [
           "llGetNextEmail(${name:address}, ${name:subject});$0"
        ],
        "description": "llGetNextEmail( string address, string subject );\n\n 120 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nGet the next queued email that comes from address, with specified subject.\n• string address – Sender's mail address\n• string subject – Mail subject\nIf address or subject an empty string, then that parameter will be treated as a wildcard.\n"
    },
    "llStartAnimation": {
        "prefix": "llStartAnimation",
        "body": [
           "llStartAnimation(${name:anim});$0"
        ],
        "description": "llStartAnimation( string anim );\n\n 129 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nStart animation anim for agent that granted PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked.\n• string anim – an item in the inventory of the prim this script is in or built-in animationTo run this function the script must request the PERMISSION_TRIGGER_ANIMATION permission with llRequestPermissions."
    },
    "llStringToBase64": {
        "prefix": "llStringToBase64",
        "body": [
           "llStringToBase64(${name:str}$0)"
        ],
        "description": "string llStringToBase64( string str );\n\n 260 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the string Base64 representation of the str interpreted as an UTF-8 byte sequence\n• string str\nIf extra bits are needed to complete the last base64 symbol, those extra bits will be zero.To go in the other direction, use llBase64ToString.\n"
    },
    "llRotBetween": {
        "prefix": "llRotBetween",
        "body": [
           "llRotBetween(${name:start}, ${name:end}$0)"
        ],
        "description": "rotation llRotBetween( vector start, vector end );\n\n 21 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a rotation that is the shortest rotation between the direction start and the direction end\n• vector start\n• vector end\n"
    },
    "llTargetOmega": {
        "prefix": "llTargetOmega",
        "body": [
           "llTargetOmega(${name:axis}, ${name:spinrate}, ${name:gain});$0"
        ],
        "description": "llTargetOmega( vector axis, float spinrate, float gain );\n\n 133 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRotates the object/prim around axis at a rate of spinrate * llVecMag(axis) in radians per second with strength gain.\n• vector axis – arbitrary axis to rotate the object around\n• float spinrate – rate of rotation in radians per second\n• float gain – also modulates the final spinrate and disables the rotation behavior if zero\n"
    },
    "llGetObjectAnimationNames": {
        "prefix": "llGetObjectAnimationNames",
        "body": [
           "llGetObjectAnimationNames($0)"
        ],
        "description": "list llGetObjectAnimationNames( );\n\n 506 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list of names of animations playing in the current object"
    },
    "llTan": {
        "prefix": "llTan",
        "body": [
           "llTan(${name:theta}$0)"
        ],
        "description": "float llTan( float theta );\n\n 2 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the tangent of theta.\n• float theta – angle expressed in radians\n"
    },
    "llGetParcelPrimOwners": {
        "prefix": "llGetParcelPrimOwners",
        "body": [
           "llGetParcelPrimOwners(${name:pos}$0)"
        ],
        "description": "list llGetParcelPrimOwners( vector pos );\n\n 324 Function ID\n 2.0 Forced Delay\n 10.0 Energy\n\nReturns a list of all residents who own objects on the parcel at pos and with individual land impact used. The list is formatted as [ key agentKey1, integer agentImpact1, key agentKey2, integer agentImpact2, ... ], and sorted by agent key with a maximum of 100 strides.\n• vector pos – position in region coordinates\nRequires owner-like permissions for the parcel.\n"
    },
    "llUpdateKeyValue": {
        "prefix": "llUpdateKeyValue",
        "body": [
           "llUpdateKeyValue(${name:k}, ${name:v}, ${3|TRUE,FALSE|}, ${name:original_value}$0)"
        ],
        "description": "key llUpdateKeyValue( string k, string v, integer checked, string original_value );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nStart an asynchronous transaction to update a key-value pair associated with the script's Experience with the given key (k) and value (v).Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.\n• string k – The key for the key-value pair\n• string v – The value for the key-value pair. Maximum 2047 characters, or 4095 if using Mono.\n• integer checked – If TRUE the update will only happen if original_value matches the value in the key-value store.\n• string original_value – The value to compare with the current value in the key-value store.\nIf checked is set to TRUE then the update will only happen if original_value matches the current value in key-value store, otherwise the dataserver will return a failure along with the error XP_ERROR_RETRY_UPDATE. This can be used to create an in-use flag so that Atomicity can be achieved.As of Jan 1, 2016 maximum bytes is 1011 for key and 4095 for value for both LSO and Mono scripts.\nUsing llUpdateKeyValue to update a key that does not exist will not generate XP_ERROR_KEY_NOT_FOUND. Instead, it will generate a new key with the specified value, as if you had used llCreateKeyValue.For this function to work, the script must be compiled into an Experience."
    },
    "llSay": {
        "prefix": "llSay",
        "body": [
           "llSay(${name:channel}, ${name:msg});$0"
        ],
        "description": "llSay( integer channel, string msg );\n\n 23 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSays the text supplied in string msg on channel supplied in integer channel.\n• integer channel – output chat channel, any integer value\n• string msg – message to be transmitted\n"
    },
    "llGetLocalRot": {
        "prefix": "llGetLocalRot",
        "body": [
           "llGetLocalRot($0)"
        ],
        "description": "rotation llGetLocalRot( );\n\n 63 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the rotation of the prim relative to the root.If called from the root prim, it returns the objects rotation.\n"
    },
    "llGetLinkNumberOfSides": {
        "prefix": "llGetLinkNumberOfSides",
        "body": [
           "llGetLinkNumberOfSides(${1|integer link,LINK_ROOT,LINK_THIS|}$0)"
        ],
        "description": "integer llGetLinkNumberOfSides( integer link );\n\n 357 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the number of faces (or sides) of the prim link.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag \nSee Face for more information about faces and the conditions that control the number of faces a prim will have.\n"
    },
    "llSetAngularVelocity": {
        "prefix": "llSetAngularVelocity",
        "body": [
           "llSetAngularVelocity(${name:initial_omega}, ${2|TRUE,FALSE|});$0"
        ],
        "description": "llSetAngularVelocity( vector initial_omega, integer local );\n\n ??? Function ID\n 0.0 Forced Delay\n ??? Energy\n\nApplies rotational velocity to object. \nIt does the same job as llApplyRotationalImpulse but doesn't depend of the mass of object .\n• vector initial_omega\n• integer local – boolean, if TRUE force is treated as a local directional vector, if FALSE force is treated as a region directional vector\n"
    },
    "llResetScript": {
        "prefix": "llResetScript",
        "body": [
           "llResetScript();$0"
        ],
        "description": "llResetScript( );\n\n 163 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nResets the script.On script reset...\nThe current event/function is exited without further execution or return.Any granted URLs are released.All global variables are set to their defaultsThe event queue is cleared.The default state is set as the active stateIf it has a state_entry event, then it is queued.\n"
    },
    "llSensorRepeat": {
        "prefix": "llSensorRepeat",
        "body": [
           "llSensorRepeat(${name:name}, ${name:id}, ${3|AGENT_BY_LEGACY_NAME,AGENT,AGENT_BY_USERNAME,ACTIVE,PASSIVE,SCRIPTED|}, ${name:range}, ${name:arc}, ${name:rate});$0"
        ],
        "description": "llSensorRepeat( string name, key id, integer type, float range, float arc, float rate );\n\n 29 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPerforms a single scan for name and id with type within range meters and arc radians of forward vector and repeats every rate seconds. It does not perform the first scan until rate seconds have passed.\n• string name – Object or avatar name!\n• key id – group, avatar or object UUID\n• integer type – mask (AGENT_BY_LEGACY_NAME, AGENT_BY_USERNAME, ACTIVE, PASSIVE, and/or SCRIPTED)\n• float range – range in meters, [0.0, 96.0]\n• float arc – the max angle between the local x-axis of the prim and detectable objects, range [0.0, PI]\n• float rate – How often a sensor/no_sensor will be queued.\nIf name, id, and/or type are empty or 0, they are ignored.If id is an invalid key or NULL_KEY it is treated as empty.Depending upon which AGENT* flag is used determines the format requirements for name\nSee: llSensor for an excellent explanation of arc.\n"
    },
    "llScaleTexture": {
        "prefix": "llScaleTexture",
        "body": [
           "llScaleTexture(${name:u}, ${name:v}, ${3|integer face,ALL_SIDES|});$0"
        ],
        "description": "llScaleTexture( float u, float v, integer face );\n\n 54 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nSets the texture u & v scales for the chosen face.\n• float u – horizontal (x) scale in the interval [-100.0, 100.0]\n• float v – vertical (y) scale in the interval [-100.0, 100.0]\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llSetAgentEnvironment": {
        "prefix": "llSetAgentEnvironment",
        "body": [
           "llSetAgentEnvironment(${name:agent_id}, ${name:transition}, ${name:params});$0"
        ],
        "description": "llSetAgentEnvironment( key agent_id, float transition, list params );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nThis function sets environment values for an individual agent in an experience. The changes to the environment persist until the agent moves to a new region or llSetAgentEnvironment is called for an agent with an empty list. Passing an empty list in params will strip all environmental settings applied to this agent as part of the experience\n• key agent_id – The key for an agent in the region. The agent must be in the region and must be participating in the experience.\n• float transition – The number of seconds over which to transition to the new settings.\n• list params – A list of parameters to retrieve from the current environment. See table below for details.\n"
    },
    "llSetVehicleType": {
        "prefix": "llSetVehicleType",
        "body": [
           "llSetVehicleType(${1|VEHICLE_TYPE_NONE,VEHICLE_TYPE_SLED,VEHICLE_TYPE_CAR,VEHICLE_TYPE_BOAT,VEHICLE_TYPE_AIRPLANE,VEHICLE_TYPE_BALLOON|});$0"
        ],
        "description": "llSetVehicleType( integer type );\n\n 232 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the vehicle type to one of the default types.\n• integer type\n"
    },
    "llLog10": {
        "prefix": "llLog10",
        "body": [
           "llLog10(${name:val}$0)"
        ],
        "description": "float llLog10( float val );\n\n 264 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the base 10 logarithm of val.If val <= 0 return zero instead.\n• float val\nTo get the natural logarithm use llLog.llLog10 should only be used where the base 10 log is needed, all other applications should use llLog instead.\n"
    },
    "llSendRemoteData": {
        "prefix": "llSendRemoteData",
        "body": [
           "llSendRemoteData(${name:channel}, ${name:dest}, ${name:idata}, ${name:sdata}$0)"
        ],
        "description": "key llSendRemoteData( key channel, string dest, integer idata, string sdata );\n\n 255 Function ID\n 3.0 Forced Delay\n 10.0 Energy\n\nSend an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.Returns a key that is the message_id for the resulting remote_data events.\n• key channel\n• string dest\n• integer idata\n• string sdata\n"
    },
    "llSleep": {
        "prefix": "llSleep",
        "body": [
           "llSleep(${name:sec});$0"
        ],
        "description": "llSleep( float sec );\n\n 108 Function ID\n 0.0 Forced Delay\n 0.0 Energy\n\nPuts the script to sleep for sec seconds. The script will not do anything during this time.\n• float sec\n"
    },
    "llRot2Axis": {
        "prefix": "llRot2Axis",
        "body": [
           "llRot2Axis(${name:rot}$0)"
        ],
        "description": "vector llRot2Axis( rotation rot );\n\n 170 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector the rotation axis represented by rot\n• rotation rot\nUse in conjunction with llRot2Angle.To undo use llAxisAngle2Rot or llAxes2Rot.\n"
    },
    "llRot2Euler": {
        "prefix": "llRot2Euler",
        "body": [
           "llRot2Euler(${name:quat}$0)"
        ],
        "description": "vector llRot2Euler( rotation quat );\n\n 15 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the Euler representation (roll, pitch, yaw) of quat, with each component expressed in radians.\n• rotation quat – Any valid rotation\n"
    },
    "llVecDist": {
        "prefix": "llVecDist",
        "body": [
           "llVecDist(${name:vec_a}, ${name:vec_b}$0)"
        ],
        "description": "float llVecDist( vector vec_a, vector vec_b );\n\n 14 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the undirected nonnegative distance between vec_a and vec_b.\n• vector vec_a – Any valid vector\n• vector vec_b – Any valid vector\n"
    },
    "llVolumeDetect": {
        "prefix": "llVolumeDetect",
        "body": [
           "llVolumeDetect(${1|TRUE,FALSE|});$0"
        ],
        "description": "llVolumeDetect( integer detect );\n\n 248 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nIf detect is TRUE, VolumeDetect is enabled, physical object and avatars can pass through the object.\n• integer detect – TRUE enables, FALSE (default) disables\nThis works much like Phantom, but unlike Phantom, VolumeDetect objects trigger collision_start and collision_end events when interpenetrating. Collision events will trigger in any script in the object.\n"
    },
    "llWanderWithin": {
        "prefix": "llWanderWithin",
        "body": [
           "llWanderWithin(${name:origin}, ${name:dist}, ${name:options});$0"
        ],
        "description": "llWanderWithin( vector origin, vector dist, list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nSets a character to wander about a central spot within a specified radius.\n• vector origin – Central point to wander about\n• vector dist – Sets how far the character may wander from origin, along each world-aligned axis\n• list options – WANDER_* flags and their parameters\n"
    },
    "llAxes2Rot": {
        "prefix": "llAxes2Rot",
        "body": [
           "llAxes2Rot(${name:fwd}, ${name:left}, ${name:up}$0)"
        ],
        "description": "rotation llAxes2Rot( vector fwd, vector left, vector up );\n\n 17 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a rotation that is defined by the 3 coordinate axes\n• vector fwd\n• vector left\n• vector up\nAll three vectors must be mutually orthogonal unit vectors.\n"
    },
    "llScaleByFactor": {
        "prefix": "llScaleByFactor",
        "body": [
           "llScaleByFactor(${name:scaling_factor}$0)"
        ],
        "description": "integer llScaleByFactor( float scaling_factor );\n\n ? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nAttempts to resize the entire object by scaling_factor, maintaining the size-position ratios of the prims.\nResizing is subject to prim scale limits and linkability limits. This function can not resize the object if the linkset is physical, a pathfinding character, in a keyframed motion, or if resizing would cause the parcel to overflow.Returns a boolean (an integer) TRUE if it succeeds, FALSE if it fails.\n• float scaling_factor – The multiplier to be used with the prim sizes and their local positions.\n"
    },
    "llTeleportAgent": {
        "prefix": "llTeleportAgent",
        "body": [
           "llTeleportAgent(${name:avatar}, ${name:landmark}, ${name:position}, ${name:look_at});$0"
        ],
        "description": "llTeleportAgent( key avatar, string landmark, vector position, vector look_at );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nRequests a teleport of avatar to a landmark stored in the object's inventory. If no landmark is provided (an empty string), the avatar is teleported to the location position in the current region. In either case, the avatar is turned to face the direction given by look_at.\n• key avatar – avatar UUID that is in the same region (the avatar to teleport, must be the owner)\n• string landmark – a landmark in the inventory of the prim this script is in or an empty string (for teleporting within the same region)\n• vector position – The position within the local region to teleport the avatar to if no landmark was provided.\n• vector look_at – The position within the region that the avatar should be turned to face upon arrival. (NOTE: This is different from the same parameter in llTeleportAgentGlobalCoords, which expects a direction to face.)To run this function the script must request the PERMISSION_TELEPORT permission with llRequestPermissions and it must be granted by avatar."
    },
    "llSetTorque": {
        "prefix": "llSetTorque",
        "body": [
           "llSetTorque(${name:torque}, ${2|TRUE,FALSE|});$0"
        ],
        "description": "llSetTorque( vector torque, integer local );\n\n 74 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the torque of object (if the script is physical)\n• vector torque\n• integer local – boolean, if TRUE uses the local axis, if FALSE uses the region region axis\n"
    },
    "llSubStringIndex": {
        "prefix": "llSubStringIndex",
        "body": [
           "llSubStringIndex(${name:source}, ${name:pattern}$0)"
        ],
        "description": "integer llSubStringIndex( string source, string pattern );\n\n 181 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the index of the first instance of pattern in source.\n• string source – what to search in (haystack)\n• string pattern – what to search for (needle)\nIf pattern is not found in source, -1 is returned.\nThe index of the first character in the string is 0\n"
    },
    "llDetectedName": {
        "prefix": "llDetectedName",
        "body": [
           "llDetectedName(${name:item}$0)"
        ],
        "description": "string llDetectedName( integer item );\n\n 31 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the name of the detected item.\n• integer item – Index of detection information\nitem does not support negative indexes.\nReturns NULL_KEY if item is not valid.\nIf the item detected is an avatar then the legacy name is returned.\n"
    },
    "llCollisionFilter": {
        "prefix": "llCollisionFilter",
        "body": [
           "llCollisionFilter(${name:name}, ${name:id}, ${3|TRUE,FALSE|});$0"
        ],
        "description": "llCollisionFilter( string name, key id, integer accept );\n\n 110 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the collision filter, exclusively or inclusively.\n• string name – filter for specific object name or avatar legacy name\n• key id – filter by group, avatar or object UUID\n• integer accept – TRUE only process collisions that match, FALSE instead excludes matches\nIf accept == TRUE, only accept collisions with objects name AND id (either is optional), otherwise with objects not name AND id\nIf name or id are blank they are not used to filter incoming messages (or you could say they match everything).\nIf id is an invalid key or a null key, it is considered blank.\n"
    },
    "llTeleportAgentHome": {
        "prefix": "llTeleportAgentHome",
        "body": [
           "llTeleportAgentHome(${name:avatar});$0"
        ],
        "description": "llTeleportAgentHome( key avatar );\n\n 158 Function ID\n 5.0 Forced Delay\n 100.0 Energy\n\nTeleports avatar on owner's land to their home location without any warning, similar to a God Summons or dying.\n• key avatar – avatar UUID that is in the same regionGenerally, the object owner must also be the land owner but there is an exception for land deeded to a group for group members with the \"Eject and freeze Residents on parcels\" ability. See #Ownership Limitations for details."
    },
    "llClearPrimMedia": {
        "prefix": "llClearPrimMedia",
        "body": [
           "llClearPrimMedia(${1|integer face,ALL_SIDES|}$0)"
        ],
        "description": "integer llClearPrimMedia( integer face );\n\n 352 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nClears (deletes) the media and all params from the given face.Returns a status (an integer) that is a STATUS_* flag which details the success/failure of the operation.\n• integer face – face number\n"
    },
    "llGetObjectName": {
        "prefix": "llGetObjectName",
        "body": [
           "llGetObjectName($0)"
        ],
        "description": "string llGetObjectName( );\n\n 202 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the name of the prim the script is attached to.  \n   \n   Important: This function does not get the name of the object's rootprim, but the name of the prim containing the script. Please use llGetLinkName(LINK_ROOT); instead.\n  "
    },
    "llXorBase64Strings": {
        "prefix": "llXorBase64Strings",
        "body": [
           "llXorBase64Strings(${name:str1}, ${name:str2}$0)"
        ],
        "description": "string llXorBase64Strings( string str1, string str2 );\n\n 262 Function ID\n 0.3 Forced Delay\n 10.0 Energy\n\nReturns a string that is a Base64 string of s1 xor'ed with s2.\n• string str1 – Base64 string\n• string str2 – Base64 string\ns2 repeats if it is shorter than s1. Retained for backwards compatibility.\n"
    },
    "llStopHover": {
        "prefix": "llStopHover",
        "body": [
           "llStopHover();$0"
        ],
        "description": "llStopHover( );\n\n 124 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nStop hovering to a height"
    },
    "llAttachToAvatar": {
        "prefix": "llAttachToAvatar",
        "body": [
           "llAttachToAvatar(${1:|ATTACH_HEAD,ATTACH_NOSE,ATTACH_MOUTH,ATTACH_FACE_TONGUE,ATTACH_CHIN,ATTACH_FACE_JAW,ATTACH_LEAR,ATTACH_REAR,ATTACH_FACE_LEAR,ATTACH_FACE_REAR,ATTACH_LEYE,ATTACH_REYE,ATTACH_FACE_LEYE,ATTACH_FACE_REYE,ATTACH_NECK,ATTACH_LSHOULDER,ATTACH_RSHOULDER,ATTACH_LUARM,ATTACH_RUARM,ATTACH_LLARM,ATTACH_RLARM,ATTACH_LHAND,ATTACH_RHAND,ATTACH_LHAND_RING1,ATTACH_RHAND_RING1,ATTACH_LWING,ATTACH_RWING,ATTACH_CHEST,ATTACH_LEFT_PEC,ATTACH_RIGHT_PEC,ATTACH_BELLY,ATTACH_BACK,ATTACH_TAIL_BASE,ATTACH_TAIL_TIP,ATTACH_AVATAR_CENTER,ATTACH_PELVIS,ATTACH_GROIN,ATTACH_LHIP,ATTACH_RHIP,ATTACH_LULEG,ATTACH_RULEG,ATTACH_RLLEG,ATTACH_LLLEG,ATTACH_LFOOT,ATTACH_RFOOT,ATTACH_HIND_LFOOT,ATTACH_HIND_RFOOT,ATTACH_HUD_CENTER_2,ATTACH_HUD_TOP_RIGHT,ATTACH_HUD_TOP_CENTER,ATTACH_HUD_TOP_LEFT,ATTACH_HUD_CENTER_1,ATTACH_HUD_BOTTOM_LEFT,ATTACH_HUD_BOTTOM,ATTACH_HUD_BOTTOM_RIGHT|});$0"
        ],
        "description": "llAttachToAvatar( integer attach_point );\n\n 113 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nAttaches the object to the avatar who has granted permission to the script. The object is taken into the users inventory and attached to attach_point.\n• integer attach_point – ATTACH_* constant or valid value (see the tables below)To run this function the script must request the PERMISSION_ATTACH permission with llRequestPermissions and it must be granted by the owner.\nIf attach_point is zero, then the object attaches to the attach point it was most recently attached to.\n"
    },
    "llStartObjectAnimation": {
        "prefix": "llStartObjectAnimation",
        "body": [
           "llStartObjectAnimation(${name:anim});$0"
        ],
        "description": "llStartObjectAnimation( string anim );\n\n 504 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nStart animation for the current object.\n• string anim – name of an animation in the inventory of the current object\n"
    },
    "llDetectedGrab": {
        "prefix": "llDetectedGrab",
        "body": [
           "llDetectedGrab(${name:number}$0)"
        ],
        "description": "vector llDetectedGrab( integer number );\n\n 37 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the grab offset of the user touching the object; only works in the touch event.\n• integer number – Index of detection information\nnumber does not support negative indexes.\nReturns <0.0, 0.0, 0.0> if number is out of range or if called from an event other than the touch event.\n"
    },
    "llVecNorm": {
        "prefix": "llVecNorm",
        "body": [
           "llVecNorm(${name:vec}$0)"
        ],
        "description": "vector llVecNorm( vector vec );\n\n 13 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the vector that is vec normalized (a unit vector sharing the same direction as vec).\n• vector vec – Any valid vector\nIf vec is a ZERO_VECTOR, than the value returned is a ZERO_VECTOR.\n"
    },
    "llCreateCharacter": {
        "prefix": "llCreateCharacter",
        "body": [
           "llCreateCharacter(${name:options});$0"
        ],
        "description": "llCreateCharacter( list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nCreates a pathfinding entity, known as a \"character\", from the object containing the script. Required to activate use of pathfinding functions.\n• list options – Character configuration options.\nBy default, the character's shape will be an upright capsule approximately the size of the linkset, adjustable via the options list. The linkset must use the land impact accounting system introduced with the mesh project.\nIf called on an existing character, all unspecified parameters other than character size will revert to their defaults (if not specified, character size will not change). This is STRONGLY preferred over calling llDeleteCharacter() followed by llCreateCharacter() as it is much, much less taxing on the server.\n"
    },
    "llLog": {
        "prefix": "llLog",
        "body": [
           "llLog(${name:val}$0)"
        ],
        "description": "float llLog( float val );\n\n 265 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the natural logarithm of val.If val <= 0 return 0.0 instead.\n• float val\nTo get the base 10 logarithm use llLog10.\n"
    },
    "llTransferLindenDollars": {
        "prefix": "llTransferLindenDollars",
        "body": [
           "llTransferLindenDollars(${name:destination}, ${name:amount}$0)"
        ],
        "description": "key llTransferLindenDollars( key destination, integer amount );\n\n ? Function ID\n 0.0 Forced Delay\n  Energy\n\nTransfer amount of L$ money from script owner to destination avatar.Returns a key used in a matching transaction_result event for the success or failure of the transfer. If the transaction is successful, this key will show in the transaction history.\n• key destination – avatar UUID\n• integer amount – number of L$, must be greater than zero, (amount > 0)To run this function the script must request the PERMISSION_DEBIT permission with llRequestPermissions and it must be granted by the owner.\nIf you aren't going to use the return value or the resulting transaction_result event consider using llGiveMoney instead of this function.\n"
    },
    "llShout": {
        "prefix": "llShout",
        "body": [
           "llShout(${name:channel}, ${name:msg});$0"
        ],
        "description": "llShout( integer channel, string msg );\n\n 24 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nShouts the text supplied in string msg on channel supplied in integer channel.\n• integer channel – output chat channel, any integer value\n• string msg – message to be transmitted\n"
    },
    "llStopMoveToTarget": {
        "prefix": "llStopMoveToTarget",
        "body": [
           "llStopMoveToTarget();$0"
        ],
        "description": "llStopMoveToTarget( );\n\n 71 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nStops critically damped motionUse in conjunction with llMoveToTarget\nTo stop rotation movement use llStopLookAt\n"
    },
    "llTakeCamera": {
        "prefix": "llTakeCamera",
        "body": [
           "llTakeCamera(${name:avatar});$0"
        ],
        "description": "llTakeCamera( key avatar );\n\n 115 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nThis function is recognized by the compiler, but was never implemented in Second Life.\n• key avatar – avatar UUID that is in the same region\n"
    },
    "llCollisionSound": {
        "prefix": "llCollisionSound",
        "body": [
           "llCollisionSound(${name:impact_sound}, ${name:impact_volume});$0"
        ],
        "description": "llCollisionSound( string impact_sound, float impact_volume );\n\n 160 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSuppress default collision sounds, replace default impact sounds with impact_sound at the volume impact_volume\n• string impact_sound – a sound in the inventory of the prim this script is in, a UUID of a sound or an empty string\n• float impact_volume – between 0.0 (silent) and 1.0 (loud) (0.0 <= impact_volume <= 1.0)\nIf impact_sound is an empty string then the collision sound is suppressed.\nIf impact_volume is set to zero the collision particles are suppressed.\n"
    },
    "llAsin": {
        "prefix": "llAsin",
        "body": [
           "llAsin(${name:val}$0)"
        ],
        "description": "float llAsin( float val );\n\n 173 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the arcsine in radians of val\n• float val – must fall in the range [-1.0, 1.0]\nThe returned value is in the range [-PI_BY_TWO, PI_BY_TWO]\n"
    },
    "llGetPhysicsMaterial": {
        "prefix": "llGetPhysicsMaterial",
        "body": [
           "llGetPhysicsMaterial($0)"
        ],
        "description": "list llGetPhysicsMaterial( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nUsed to get the physical characteristics of an object.Returns a list in the form [ float gravity_multiplier, float restitution, float friction, float density ]\n• float gravity_multiplier – range [-1.0, +28.0], default: 1.0\n• float restitution – range [0.0, 1.0], default: [0.3, 0.9] \n• float friction – range [0.0, 255.0], default: [0.2, 0.9]\n• float density – range [1.0, 22587.0] kg/m^3, default: 1000.0The default values for friction and restitution depend upon the material type."
    },
    "llDetectedTouchUV": {
        "prefix": "llDetectedTouchUV",
        "body": [
           "llDetectedTouchUV(${name:index}$0)"
        ],
        "description": "vector llDetectedTouchUV( integer index );\n\n 337 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the texture coordinates for where the prim was touched. The x & y vector positions contain the horizontal (u) & vertical (v) texture coordinates respectively (<u, v, 0.0>). Like llDetectedTouchST, the interval of each component will be [0.0, 1.0] unless the texture repeats are set to a non-default value. Increasing or decreasing the texture repeats of the face will change this interval accordingly. Additionally, unlike with llDetectedTouchST, changing a texture's rotation will change the results of this function.\nTOUCH_INVALID_TEXCOORD is returned when the touch UV coordinates cannot be determined. See Caveats for further details.\n• integer index – Index of detection information\nindex does not support negative indexes.\nFor the touch category of events only. The prim that was touched may not be the prim receiving the event, use llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace to determine which face was touched.\n"
    },
    "llDetectedTouchNormal": {
        "prefix": "llDetectedTouchNormal",
        "body": [
           "llDetectedTouchNormal(${name:index}$0)"
        ],
        "description": "vector llDetectedTouchNormal( integer index );\n\n 340 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the surface normal (perpendicular to the surface) where the touch event was triggered. Along with llDetectedTouchBinormal, this information can be used to find the tangent space at the touch location.\n• integer index – Index of detection information\nindex does not support negative indexes.\nFor the touch category of events only. The prim that was touched may not be the prim receiving the event, use llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace to determine which face was touched.To find the third tangent vector, cross the binormal with this vector.\n"
    },
    "llSetAnimationOverride": {
        "prefix": "llSetAnimationOverride",
        "body": [
           "llSetAnimationOverride(${name:anim_state}, ${name:anim});$0"
        ],
        "description": "llSetAnimationOverride( string anim_state, string anim );\n\n ? Function ID\n 0.0 Forced Delay\n ? Energy\n\nSet the animation (anim) that will play for the given animation state (anim_state).\n• string anim_state – animation state to be overriden\n• string anim – an animation in the inventory of the prim this script is in or the name of a built-in animationTo run this function the script must request the PERMISSION_OVERRIDE_ANIMATIONS permission with llRequestPermissions.\nNote: Animation overrides survive everything, except relog.\n"
    },
    "llDetectedOwner": {
        "prefix": "llDetectedOwner",
        "body": [
           "llDetectedOwner(${name:number}$0)"
        ],
        "description": "key llDetectedOwner( integer number );\n\n 33 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the key (UUID) of the owner of the object.\n• integer number – Index of detection information\nnumber does not support negative indexes.\nReturns an empty key if number does not relate to a valid sensed object\n"
    },
    "llTarget": {
        "prefix": "llTarget",
        "body": [
           "llTarget(${name:position}, ${name:range}$0)"
        ],
        "description": "integer llTarget( vector position, float range );\n\n 66 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nThis function is to have the script know when it has reached a position.It registers a position with a range that triggers at_target and not_at_target events continuously until unregistered.Returns a handle (an integer) to unregister the target with llTargetRemove.\n• vector position – position in region coordinates\n• float range\nA similar function exists for rotations: llRotTargetThis function does not move the object, to do that use llSetPos or llMoveToTarget.\n"
    },
    "llLoopSound": {
        "prefix": "llLoopSound",
        "body": [
           "llLoopSound(${name:sound}, ${name:volume});$0"
        ],
        "description": "llLoopSound( string sound, float volume );\n\n 87 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nPlays attached sound looping indefinitely at volume\n• string sound – a sound in the inventory of the prim this script is in or a UUID of a sound\n• float volume – between 0.0 (silent) and 1.0 (loud) (0.0 <= volume <= 1.0)\n"
    },
    "llCloud": {
        "prefix": "llCloud",
        "body": [
           "llCloud(${name:offset}$0)"
        ],
        "description": "float llCloud( vector offset );\n\n 43 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the cloud density at the prim position + offset\n• vector offset – offset relative to the prim's position and expressed in local coordinates\nOnly the x and y coordinates in offset are important, the z component is ignored.\nReturned values are in the range [0.0, 2.0]. Values above 1.0 indicate rain.\n"
    },
    "llCreateKeyValue": {
        "prefix": "llCreateKeyValue",
        "body": [
           "llCreateKeyValue(${name:k}, ${name:v}$0)"
        ],
        "description": "key llCreateKeyValue( string k, string v );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nStart an asynchronous transaction to create a key-value pair associated with the script's Experience using the given key (k) and value (v).Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed.\n• string k – The key for the key-value pair\n• string v – The value for the key-value pair. Maximum 2047 characters, or 4095 if using Mono.\nIf the key already exists the dataserver will return a failure along with the error XP_ERROR_STORAGE_EXCEPTION.As of Jan 1, 2016 maximum bytes is 1011 for key and 4095 for value for both LSO and Mono scripts.For this function to work, the script must be compiled into an Experience."
    },
    "llCSV2List": {
        "prefix": "llCSV2List",
        "body": [
           "llCSV2List(${name:src}$0)"
        ],
        "description": "list llCSV2List( string src );\n\n 196 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nThis function takes a string of values separated by commas, and turns it into a list.Returns a list made by parsing src, a string of comma separated values.\n• string src\nTo convert a list into a comma-separated string use llList2CSV.\nDo not confuse this function with the CSV format, it is not the CSV format.\n"
    },
    "llParcelMediaCommandList": {
        "prefix": "llParcelMediaCommandList",
        "body": [
           "llParcelMediaCommandList(${name:command)});$0"
        ],
        "description": "llParcelMediaCommandList( list commandList );\n\n 298 Function ID\n 2.0 Forced Delay\n 10.0 Energy\n\nControls the playback of movies and other multimedia resources on a parcel or for an agent.\n• list commandList – A list of integer PARCEL_MEDIA_COMMAND_* flags and their parameters\n"
    },
    "llCreateLink": {
        "prefix": "llCreateLink",
        "body": [
           "llCreateLink(${name:target}, ${name:parent});$0"
        ],
        "description": "llCreateLink( key target, integer parent );\n\n 141 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nAttempt to link the script's object with target.\n• key target – prim UUID that is in the same region\n• integer parent – If FALSE, then target becomes the root. If TRUE, then the script's object becomes the root.To run this function the script must request the PERMISSION_CHANGE_LINKS permission with llRequestPermissions and it must be granted by the owner.\ntarget must be modifiable and have the same owner.\nThis object must also be modifiable.\n"
    },
    "llSensorRemove": {
        "prefix": "llSensorRemove",
        "body": [
           "llSensorRemove();$0"
        ],
        "description": "llSensorRemove( );\n\n 30 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRemoves the sensor setup by llSensorRepeat.There are no parameters or return value for this function, as only one llSensorRepeat can be specified per script.\n"
    },
    "llManageEstateAccess": {
        "prefix": "llManageEstateAccess",
        "body": [
           "llManageEstateAccess(${1|ESTATE_ACCESS_ALLOWED_AGENT_ADD,ESTATE_ACCESS_ALLOWED_AGENT_REMOVE,ESTATE_ACCESS_ALLOWED_GROUP_ADD,ESTATE_ACCESS_ALLOWED_GROUP_REMOVE,ESTATE_ACCESS_BANNED_AGENT_ADD,ESTATE_ACCESS_BANNED_AGENT_REMOVE|}, ${name:avatar}$0)"
        ],
        "description": "integer llManageEstateAccess( integer action, key avatar );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nUse to add or remove agents from the estate's agent access or ban lists or groups from the estate's group access list.Returns a boolean (an integer) TRUE if the call was successful; FALSE if throttled, invalid action, invalid or null id or object owner is not allowed to manage the estate.\n• integer action – ESTATE_ACCESS_* flag\n• key avatar – avatar or group UUID\nOnly works for objects owned by the Estate Owner or an Estate Manager. By default, the object owner is notified of every change made using this function. But if the owner grants PERMISSION_SILENT_ESTATE_MANAGEMENT to the script, the owner will not be notified.\n"
    },
    "llAbs": {
        "prefix": "llAbs",
        "body": [
           "llAbs(${name:val}$0)"
        ],
        "description": "integer llAbs( integer val );\n\n 6 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the positive version of val.\n• integer val – Any integer value\n This function is similar to functions (e.g. abs) found in many other languages:  C++ abs\n"
    },
    "llGetSimulatorHostname": {
        "prefix": "llGetSimulatorHostname",
        "body": [
           "llGetSimulatorHostname($0)"
        ],
        "description": "string llGetSimulatorHostname( );\n\n 283 Function ID\n 10.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the hostname of the machine the script is running on (same as string in viewer Help dialog)"
    },
    "llPassCollisions": {
        "prefix": "llPassCollisions",
        "body": [
           "llPassCollisions(${1|PASS_IF_NOT_HANDLED,PASS_ALWAYS,PASS_NEVER|});$0"
        ],
        "description": "llPassCollisions( integer pass );\n\n 166 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the pass-collisions prim attribute.\n• integer pass – PASS_* flag \nWhether Collisions are passed to the root prim depends not only on which PASS_* flag is selected, but may also depend on if there is a script that in the prim that handles one of the collision events. For this reason most users will want to use PASS_ALWAYS or PASS_NEVER as they do not have this variable behavior.\nThe default value for this attribute is PASS_IF_NOT_HANDLED."
    },
    "llOwnerSay": {
        "prefix": "llOwnerSay",
        "body": [
           "llOwnerSay(${name:msg});$0"
        ],
        "description": "llOwnerSay( string msg );\n\n 292 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSays msg to the object's owner only, if the owner is currently in the same region.\n• string msg – message to be transmitted\n"
    },
    "llWind": {
        "prefix": "llWind",
        "body": [
           "llWind(${name:offset}$0)"
        ],
        "description": "vector llWind( vector offset );\n\n 44 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the wind velocity at the prim's position + offset\n• vector offset – offset relative to the prim's position and expressed in local coordinates\nThe requested position needs to be in the same region.\nOnly the x and y coordinates in offset are important, the z component is ignored."
    },
    "llTextBox": {
        "prefix": "llTextBox",
        "body": [
           "llTextBox(${name:avatar}, ${name:message}, ${name:channel});$0"
        ],
        "description": "llTextBox( key avatar, string message, integer channel );\n\n 335 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nShows a dialog box on avatar's screen with the text message. It contains a text box for input, any text that is entered is said by avatar on channel when the \"Submit\" button is clicked.\n• key avatar – avatar UUID that is in the same region\n• string message – message to be displayed in the text box\n• integer channel – output chat channel, any integer value\n"
    },
    "llModPow": {
        "prefix": "llModPow",
        "body": [
           "llModPow(${name:a}, ${name:b}, ${name:c}$0)"
        ],
        "description": "integer llModPow( integer a, integer b, integer c );\n\n 300 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is a raised to the b power, mod c. ( (a**b)%c )\n• integer a\n• integer b\n• integer c\n"
    },
    "llPassTouches": {
        "prefix": "llPassTouches",
        "body": [
           "llPassTouches(${1|PASS_IF_NOT_HANDLED,PASS_ALWAYS,PASS_NEVER|});$0"
        ],
        "description": "llPassTouches( integer pass );\n\n 154 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the pass-touches prim attribute.\n• integer pass – PASS_* flag \nWhether Touches are passed to the root prim depends not only on which PASS_* flag is selected, but may also depend on if there is a script that in the prim that handles one of the touch events. For this reason most users will want to use PASS_ALWAYS or PASS_NEVER as they do not have this variable behavior.\nThe default value for this attribute is PASS_ALWAYS."
    },
    "llGetScale": {
        "prefix": "llGetScale",
        "body": [
           "llGetScale($0)"
        ],
        "description": "vector llGetScale( );\n\n 48 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the scale of the prim."
    },
    "llDetachFromAvatar": {
        "prefix": "llDetachFromAvatar",
        "body": [
           "llDetachFromAvatar();$0"
        ],
        "description": "llDetachFromAvatar( );\n\n 114 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nDetach object from avatar.\nTo run this function the script must request the PERMISSION_ATTACH permission with llRequestPermissions and it must be granted by the owner.\nThe detached object remains in the user's inventory (unless it was a temporary attachment, in which case it will be destroyed).\n"
    },
    "llBreakLink": {
        "prefix": "llBreakLink",
        "body": [
           "llBreakLink(${name:link});$0"
        ],
        "description": "llBreakLink( integer link );\n\n 142 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nDelinks the prim with the given link number in a linked object set\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) To run this function the script must request the PERMISSION_CHANGE_LINKS permission with llRequestPermissions and it must be granted by the owner."
    },
    "llFabs": {
        "prefix": "llFabs",
        "body": [
           "llFabs(${name:val}$0)"
        ],
        "description": "float llFabs( float val );\n\n 7 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the positive version of val.\n• float val – Any valid float value\n This function is similar to functions (e.g. fabs) found in many other languages:  C++ fabs\n"
    },
    "llFloor": {
        "prefix": "llFloor",
        "body": [
           "llFloor(${name:val}$0)"
        ],
        "description": "integer llFloor( float val );\n\n 9 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the integer value of val rounded towards negative infinity (return <= val).\n• float val – Any valid float value\n"
    },
    "llDetectedTouchST": {
        "prefix": "llDetectedTouchST",
        "body": [
           "llDetectedTouchST(${name:index}$0)"
        ],
        "description": "vector llDetectedTouchST( integer index );\n\n 342 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the surface coordinates for where the prim was touched. The x & y vector positions contain the horizontal (s) & vertical (t) face coordinates respectively (<s, t, 0.0>). Each component is usually in the interval [0.0, 1.0] with the origin in the bottom left corner. With some mesh objects, values of less than 0.0 and higher than 1.0 have been observed.\nTOUCH_INVALID_TEXCOORD is returned when the surface coordinates cannot be determined. See Caveats for further details.\n• integer index – Index of detection information\nindex does not support negative indexes.\nFor the touch category of events only. The prim that was touched may not be the prim receiving the event, use llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace to determine which face was touched.\n"
    },
    "llPatrolPoints": {
        "prefix": "llPatrolPoints",
        "body": [
           "llPatrolPoints(${name:patrolPoints}, [PATROL_PAUSE_AT_WAYPOINTS,${2|TRUE,FALSE|}]);$0"
        ],
        "description": "llPatrolPoints( list patrolPoints, list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nSets the object patrolling between the points specified in patrolPoints.\n• list patrolPoints – A list of vectors for the character to travel through sequentially. The list must contain at least two entries.\n• list options – PATROL_* flags and their parameters\n"
    },
    "llEuler2Rot": {
        "prefix": "llEuler2Rot",
        "body": [
           "llEuler2Rot(${name:v}$0)"
        ],
        "description": "rotation llEuler2Rot( vector v );\n\n 16 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a rotation representation of the Euler Angles v.\n• vector v – Angle\n"
    },
    "llDeleteCharacter": {
        "prefix": "llDeleteCharacter",
        "body": [
           "llDeleteCharacter();$0"
        ],
        "description": "llDeleteCharacter( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nConvert the object back to a standard object, removing all pathfinding properties."
    },
    "llDetectedTouchPos": {
        "prefix": "llDetectedTouchPos",
        "body": [
           "llDetectedTouchPos(${name:index}$0)"
        ],
        "description": "vector llDetectedTouchPos( integer index );\n\n 339 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the vector position where the object was touched in region coordinates, unless it is attached to the HUD, in which case it returns the position in screen space coordinates.\n• integer index – Index of detection information\nindex does not support negative indexes.\nFor the touch category of events only. The prim that was touched may not be the prim receiving the event, use llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace to determine which face was touched.\n"
    },
    "llOverMyLand": {
        "prefix": "llOverMyLand",
        "body": [
           "llOverMyLand(${name:id}$0)"
        ],
        "description": "integer llOverMyLand( key id );\n\n 215 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer boolean, TRUE if id is over land owned by the script owner, FALSE otherwise.\n• key id – group, avatar or object UUID that is in the same region\nOn group deeded land the object containing the script must be deeded to the same group. (It is not enough to set the script to the group.)\n"
    },
    "llMD5String": {
        "prefix": "llMD5String",
        "body": [
           "llMD5String(${name:src}, ${name:nonce}$0)"
        ],
        "description": "string llMD5String( string src, integer nonce );\n\n 258 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string of 32 hex characters that is the MD5 checksum of src with a salt of \":\"+nonce.\n• string src\n• integer nonce\n"
    },
    "llBreakAllLinks": {
        "prefix": "llBreakAllLinks",
        "body": [
           "llBreakAllLinks();$0"
        ],
        "description": "llBreakAllLinks( );\n\n 143 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nDelinks all prims in the link set.\nTo run this function the script must request the PERMISSION_CHANGE_LINKS permission with llRequestPermissions and it must be granted by the owner."
    },
    "llDeleteKeyValue": {
        "prefix": "llDeleteKeyValue",
        "body": [
           "llDeleteKeyValue(${name:k}$0)"
        ],
        "description": "key llDeleteKeyValue( string k );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nStart an asynchronous transaction to delete a key-value pair associated with the script's Experience with the given key (k).Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.\n• string k – The key for the key-value pairThe key for the key-value pair\nIf the key does not exist the dataserver will return a failure along with the error XP_ERROR_STORAGE_EXCEPTION.For this function to work, the script must be compiled into an Experience."
    },
    "llGetSunDirection": {
        "prefix": "llGetSunDirection",
        "body": [
           "llGetSunDirection($0)"
        ],
        "description": "vector llGetSunDirection( );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nReturns a normalized vector to the current sun position at the location of object containing the script. llGetSunDirection is the vector to the parcel's sun, llGetRegionSunDirection is the vector to region's sun. If there is no custom environment set for the current parcel llGetSunDirection returns the direction to the region's sun. These functions are altitude aware.Returns a vector "
    },
    "llGetAndResetTime": {
        "prefix": "llGetAndResetTime",
        "body": [
           "llGetAndResetTime($0)"
        ],
        "description": "float llGetAndResetTime( );\n\n 84 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is script time in seconds and then resets the script time to zero."
    },
    "llDialog": {
        "prefix": "llDialog",
        "body": [
           "llDialog(${name:avatar}, ${name:message}, ${name:buttons}, ${name:channel});$0"
        ],
        "description": "llDialog( key avatar, string message, list buttons, integer channel );\n\n 247 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nShows a dialog box in the lower right corner of the avatar's screen (upper right in Viewer 1.x) with a message and choice buttons, as well as an ignore button. This has many uses ranging from simple message delivery to complex menu systems.\n• key avatar – avatar UUID that is in the same region\n• string message – message to be displayed in the dialog box\n• list buttons – button labels\n• integer channel – output chat channel, any integer value\nWhen a button is pressed, the avatar says the text of the button label on channel.The position where the chat is generated is where the root prim of the dialog generating object was when the dialog button was pressed.\n"
    },
    "llGetDate": {
        "prefix": "llGetDate",
        "body": [
           "llGetDate($0)"
        ],
        "description": "string llGetDate( );\n\n 204 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the current date in the UTC time zone in the format \"YYYY-MM-DD\".If you wish to know the time as well use: llGetTimestamp which uses the format \"YYYY-MM-DDThh:mm:ss.ff..fZ\"\n"
    },
    "llClearCameraParams": {
        "prefix": "llClearCameraParams",
        "body": [
           "llClearCameraParams();$0"
        ],
        "description": "llClearCameraParams( );\n\n 314 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nResets all camera parameters to default values and turns off scripted camera control.\nTo run this function the script must request the PERMISSION_CONTROL_CAMERA permission with llRequestPermissions."
    },
    "llPreloadSound": {
        "prefix": "llPreloadSound",
        "body": [
           "llPreloadSound(${name:sound});$0"
        ],
        "description": "llPreloadSound( string sound );\n\n 93 Function ID\n 1.0 Forced Delay\n 10.0 Energy\n\nPreloads sound on viewers within range\n• string sound – a sound in the inventory of the prim this script is in or a UUID of a sound\n"
    },
    "llDetectedLinkNumber": {
        "prefix": "llDetectedLinkNumber",
        "body": [
           "llDetectedLinkNumber(${name:number}$0)"
        ],
        "description": "integer llDetectedLinkNumber( integer number );\n\n 40 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the link_number (an integer) of the triggered event. If not supported by the event, returns zero.\n• integer number – Index of detection information\nnumber does not support negative indexes.\nFor touch and collision categories of events only.\n"
    },
    "llPursue": {
        "prefix": "llPursue",
        "body": [
           "llPursue(${name:target}, ${name:options});$0"
        ],
        "description": "llPursue( key target, list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nCauses the object to pursue target.\n• key target – group, avatar or object UUID to pursue.\n• list options – Parameters for pursuit; see below.\n"
    },
    "llRegionSay": {
        "prefix": "llRegionSay",
        "body": [
           "llRegionSay(${name:channel}, ${name:msg});$0"
        ],
        "description": "llRegionSay( integer channel, string msg );\n\n 331 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSays the string msg on channel number channel that can be heard anywhere in the region by a script listening on channel.\n• integer channel – output chat channel, any integer value except zero\n• string msg – message to be transmitted\nRegardless of where the prim is, the message will not travel over region borders.\n"
    },
    "llPow": {
        "prefix": "llPow",
        "body": [
           "llPow(${name:base}, ${name:exponent}$0)"
        ],
        "description": "float llPow( float base, float exponent );\n\n 5 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is base raised to the power exponent (baseexponent)\n• float base\n• float exponent\nTriggers a Math Error for imaginary results ((exponent != (integer)exponent) && (base < 0.0)) when not compiled in mono.\nReturns NaN when compiled in mono without crash\n"
    },
    "llAvatarOnLinkSitTarget": {
        "prefix": "llAvatarOnLinkSitTarget",
        "body": [
           "llAvatarOnLinkSitTarget(${1|integer link,LINK_ROOT,LINK_THIS|}$0)"
        ],
        "description": "key llAvatarOnLinkSitTarget( integer link );\n\n ? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a key that is the UUID of the user seated on the prim.\n• integer link – Link number (1: root prim, >1: child prims and seated avatars) or a LINK_* flag \nIf the prim lacks a sit target or there is no avatar sitting on the prim, then NULL_KEY is returned.\n"
    },
    "llSetObjectName": {
        "prefix": "llSetObjectName",
        "body": [
           "llSetObjectName(${name:name});$0"
        ],
        "description": "llSetObjectName( string name );\n\n 203 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the prim's name according to the name parameter.\n• string name\nIf this function is called from a child prim in a linked set, it will change the name of the child prim and not the root prim.\n"
    },
    "llRemoveFromLandBanList": {
        "prefix": "llRemoveFromLandBanList",
        "body": [
           "llRemoveFromLandBanList(${name:avatar});$0"
        ],
        "description": "llRemoveFromLandBanList( key avatar );\n\n 312 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nRemove avatar from the land ban list\n• key avatar – avatar UUID\n"
    },
    "llOffsetTexture": {
        "prefix": "llOffsetTexture",
        "body": [
           "llOffsetTexture(${name:u}, ${name:v}, ${name:face});$0"
        ],
        "description": "llOffsetTexture( float u, float v, integer face );\n\n 55 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nSets the texture u & v offsets for the chosen face.\n• float u – horizontal (x) offset in the interval [-1.0, 1.0]\n• float v – vertical (y) offset in the interval [-1.0, 1.0]\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llSetRemoteScriptAccessPin": {
        "prefix": "llSetRemoteScriptAccessPin",
        "body": [
           "llSetRemoteScriptAccessPin(${name:pin});$0"
        ],
        "description": "llSetRemoteScriptAccessPin( integer pin );\n\n 252 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nAllows a prim to have scripts remotely loaded via llRemoteLoadScriptPin when it is passes the correct pin and the prim is set mod.\n• integer pin – zero disables (ie llRemoteLoadScriptPin will fail), non-zero enables.\n"
    },
    "llRequestDisplayName": {
        "prefix": "llRequestDisplayName",
        "body": [
           "llRequestDisplayName(${name:id}$0)"
        ],
        "description": "key llRequestDisplayName( key id );\n\n 361 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRequests the Display Name of the agent identified by id. When the Display Name is available the dataserver event will be raised. The agent identified by id does not need to be in the same region or online at the time of the request.Returns the handle (a key) that is used to identify the dataserver event when it is raised.\n• key id – avatar UUID\n"
    },
    "llGroundContour": {
        "prefix": "llGroundContour",
        "body": [
           "llGroundContour(${name:offset}$0)"
        ],
        "description": "vector llGroundContour( vector offset );\n\n 223 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a vector that is the ground contour direction below the prim position + offset. The contour is the direction of a contour line at that point, that is the direction in which there is no change in elevation.\n• vector offset – offset relative to the prim's position and expressed in local coordinates\nThe requested position needs to be in the same region.\nOnly the x and y coordinates in offset are important, the z component is ignored."
    },
    "llSetScriptState": {
        "prefix": "llSetScriptState",
        "body": [
           "llSetScriptState(${name:name}, ${2|TRUE,FALSE|});$0"
        ],
        "description": "llSetScriptState( string name, integer running );\n\n 148 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSet the running state of the script name.\n• string name – a script in the inventory of the prim this script is in\n• integer running – boolean, if TRUE the script will be enabled, if FALSE the script will be disabled\n"
    },
    "llSetVehicleFlags": {
        "prefix": "llSetVehicleFlags",
        "body": [
           "llSetVehicleFlags(${1|VEHICLE_FLAG_NO_DEFLECTION_UP,VEHICLE_FLAG_LIMIT_ROLL_ONLY,VEHICLE_FLAG_HOVER_WATER_ONLY,VEHICLE_FLAG_HOVER_TERRAIN_ONLY,VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT,VEHICLE_FLAG_HOVER_UP_ONLY,VEHICLE_FLAG_LIMIT_MOTOR_UP,VEHICLE_FLAG_MOUSELOOK_STEER,VEHICLE_FLAG_MOUSELOOK_BANK,VEHICLE_FLAG_CAMERA_DECOUPLED|});$0"
        ],
        "description": "llSetVehicleFlags( integer flags );\n\n 236 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nEnabled the specified vehicle flags\n• integer flags – mask of VEHICLE_FLAG_* flags\n"
    },
    "llSetVehicleRotationParam": {
        "prefix": "llSetVehicleRotationParam",
        "body": [
           "llSetVehicleRotationParam(${1:VEHICLE_REFERENCE_FRAME}, ${name:rot});$0"
        ],
        "description": "llSetVehicleRotationParam( integer param, rotation rot );\n\n 235 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the vehicle rotation parameter param to rot.\n• integer param – VEHICLE_* flag\n• rotation rot\n"
    },
    "llSHA1String": {
        "prefix": "llSHA1String",
        "body": [
           "llSHA1String(${name:src}$0)"
        ],
        "description": "string llSHA1String( string src );\n\n 343 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string of 40 hex characters that is the SHA-1 security hash of src.\n• string src\n"
    },
    "llRot2Angle": {
        "prefix": "llRot2Angle",
        "body": [
           "llRot2Angle(${name:rot}$0)"
        ],
        "description": "float llRot2Angle( rotation rot );\n\n 171 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a float that is the rotation angle represented by rot\n• rotation rot\nUse in conjunction with llRot2Axis.To undo use llAxisAngle2Rot.\n"
    },
    "llReadKeyValue": {
        "prefix": "llReadKeyValue",
        "body": [
           "llReadKeyValue(${name:k}$0)"
        ],
        "description": "key llReadKeyValue( string k );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nStart an asynchronous transaction to read the value associated with the specified key (k) and the script's Experience.Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.\n• string k – The key for the key-value pair\nIf the key does not exist the dataserver will return a failure along with the error XP_ERROR_KEY_NOT_FOUND.For this function to work, the script must be compiled into an Experience."
    },
    "llStringLength": {
        "prefix": "llStringLength",
        "body": [
           "llStringLength(${name:str}$0)"
        ],
        "description": "integer llStringLength( string str );\n\n 128 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer that is the number of characters in str (not counting the null).\n• string str\n"
    },
    "llStopAnimation": {
        "prefix": "llStopAnimation",
        "body": [
           "llStopAnimation(${name:anim});$0"
        ],
        "description": "llStopAnimation( string anim );\n\n 130 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nStop animation anim for agent that granted PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked.\n• string anim – an animation in the inventory of the prim this script is in or a UUID of an animation or built in animation nameTo run this function the script must request the PERMISSION_TRIGGER_ANIMATION permission with llRequestPermissions."
    },
    "llSetTexture": {
        "prefix": "llSetTexture",
        "body": [
           "llSetTexture(${name:texture}, ${2|integer face,ALL_SIDES|});$0"
        ],
        "description": "llSetTexture( string texture, integer face );\n\n 53 Function ID\n 0.2 Forced Delay\n 10.0 Energy\n\nSets the texture of this prim's face.\n• string texture – a texture in the inventory of the prim this script is in or a UUID of a texture\n• integer face – face number or ALL_SIDES\nIf face is ALL_SIDES then the function works on all sides."
    },
    "llRot2Left": {
        "prefix": "llRot2Left",
        "body": [
           "llRot2Left(${name:q}$0)"
        ],
        "description": "vector llRot2Left( rotation q );\n\n 19 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nComputes the orientation of the local y-axis relative to the parent (i.e. relative to the root prim or the world).Returns a vector that is the left vector defined by q, i.e. a unit vector pointing in the local positive Y direction\n• rotation q\n"
    },
    "llReturnObjectsByOwner": {
        "prefix": "llReturnObjectsByOwner",
        "body": [
           "llReturnObjectsByOwner(${name:owner}, ${2|OBJECT_RETURN_PARCEL,OBJECT_RETURN_PARCEL_OWNER,OBJECT_RETURN_REGION|}$0)"
        ],
        "description": "integer llReturnObjectsByOwner( key owner, integer scope );\n\n ? Function ID\n 0.0 Forced Delay\n  Energy\n\nIf the script is owned by an agent, PERMISSION_RETURN_OBJECTS may be granted by the owner. If the script is owned by a group, this permission may be granted by an agent belonging to the group's \"Owners\" role.Returns an integer that is the number of objects successfully returned to their owners or an ERR_* flag.\n• key owner – avatar or group UUID\n• integer scope – OBJECT_RETURN_* flagTo run this function the script must request the PERMISSION_RETURN_OBJECTS permission with llRequestPermissions.\nIf the return value is negative, it represents an error flag.\n"
    },
    "llMakeExplosion": {
        "prefix": "llMakeExplosion",
        "body": [
           "llMakeExplosion(DEPRECATED, No use);$0"
        ],
        "description": "llMakeExplosion( integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset );\n\n 100 Function ID\n 0.1 Forced Delay\n 10.0 Energy\n\nMake a round explosion of particles\n• integer particles\n• float scale\n• float vel\n• float lifetime\n• float arc\n• string texture – a texture in the inventory of the prim this script is in or a UUID of a texture\n• vector offset – offset relative to the prim's position and expressed in local coordinates and is completely ignored.\n"
    },
    "llEjectFromLand": {
        "prefix": "llEjectFromLand",
        "body": [
           "llEjectFromLand(${name:avatar});$0"
        ],
        "description": "llEjectFromLand( key avatar );\n\n 213 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nEjects avatar from the parcel.\n• key avatar – avatar UUID that is in the same regionGenerally, the object owner must also be the land owner but there is an exception for land deeded to a group for group members with the \"Eject and freeze Residents on parcels\" ability. See #Ownership Limitations for details."
    },
    "llGetObjectPermMask": {
        "prefix": "llGetObjectPermMask",
        "body": [
           "llGetObjectPermMask(${1|MASK_BASE,MASK_OWNER,MASK_GROUP,MASK_EVERYONE,MASK_NEXT|}$0)"
        ],
        "description": "integer llGetObjectPermMask( integer category );\n\n 287 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a bit field (an integer) of the requested permission category for the object containing this script.\n• integer category – MASK_* flag\n"
    },
    "llDeleteSubString": {
        "prefix": "llDeleteSubString",
        "body": [
           "llDeleteSubString(${name:src}, ${name:start}, ${name:end}$0)"
        ],
        "description": "string llDeleteSubString( string src, integer start, integer end );\n\n 95 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a string that is the result of removing characters from src from start to end.\n• string src\n• integer start – start index\n• integer end – end index\nstart & end support negative indexes.\nCharacters at positions start and end are removed.\n"
    },
    "llRequestPermissions": {
        "prefix": "llRequestPermissions",
        "body": [
           "llRequestPermissions(${name:agent}, ${2|PERMISSION_DEBIT,PERMISSION_TAKE_CONTROLS,PERMISSION_TRIGGER_ANIMATION,PERMISSION_ATTACH,PERMISSION_CHANGE_LINKS,PERMISSION_TRACK_CAMERA,PERMISSION_CONTROL_CAMERA,PERMISSION_TELEPORT,PERMISSION_SILENT_ESTATE_MANAGEMENT,PERMISSION_OVERRIDE_ANIMATIONS,PERMISSION_RETURN_OBJECTS|});$0"
        ],
        "description": "llRequestPermissions( key agent, integer permissions );\n\n 136 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nAsk agent for permissions to run certain classes of functions.\n• key agent – avatar UUID that is in the same region\n• integer permissions – Permission mask (bitfield containing the permissions to request).Script execution continues without waiting for a response. When a response is given, a run_time_permissions event is put in the event queue."
    },
    "llRotTargetRemove": {
        "prefix": "llRotTargetRemove",
        "body": [
           "llRotTargetRemove(${name:handle});$0"
        ],
        "description": "llRotTargetRemove( integer handle );\n\n 69 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nRemoves rotational target handle registered with llRotTarget\n• integer handle – handle to control at_rot_target and not_at_rot_target events\n"
    },
    "llAllowInventoryDrop": {
        "prefix": "llAllowInventoryDrop",
        "body": [
           "llAllowInventoryDrop(${1|TRUE,FALSE|});$0"
        ],
        "description": "llAllowInventoryDrop( integer add );\n\n 176 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nAllows for all users without modify permissions to add inventory items to a prim.\n• integer add – boolean, If TRUE it allows anyone, even if they don't have modify rights to a prim, regardless of whether they are the owner or not, to drop items into that prim, If FALSE (default) inventory dropping can still be done, but it is restricted only to people with modify permissions to that prim\nTo actually do the dropping, you need to drag an item from your inventory and drop it onto the prim WHILE holding down your Ctrl key. If you've got everything right, then just before you release it, you will see the prim framed in red.\nOwnership of the dropped inventory item changes to the owner of the prim. Next owner permissions kick in on the item that was dropped in. Non-transfer items cannot be dropped into a prim owned by someone else.\nAn application might be a public \"suggestion box\" that you want to let people drop notecards into.\n"
    },
    "llModifyLand": {
        "prefix": "llModifyLand",
        "body": [
           "llModifyLand(${1|LAND_LEVEL,LAND_RAISE,LAND_LOWER,LAND_SMOOTH,LAND_NOISE,LAND_REVERT|}, ${2|LAND_SMALL_BRUSH,LAND_MEDIUM_BRUSH,LAND_LARGE_BRUSH|});$0"
        ],
        "description": "llModifyLand( integer action, integer brush );\n\n 159 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nModify land with action on brush\n• integer action – LAND_* flag\n• integer brush – LAND_*_BRUSH flag\nThe position of the prim is used to determine the input for various flags.\n"
    },
    "llMinEventDelay": {
        "prefix": "llMinEventDelay",
        "body": [
           "llMinEventDelay(${name:delay});$0"
        ],
        "description": "llMinEventDelay( float delay );\n\n 125 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSet the minimum time between events being handled.\nDefaults and minimums vary by the event type, see LSL Delay.\n• float delay – time in seconds\n"
    },
    "llDeleteSubList": {
        "prefix": "llDeleteSubList",
        "body": [
           "llDeleteSubList(${name:src}, ${name:start}, ${name:end}$0)"
        ],
        "description": "list llDeleteSubList( list src, integer start, integer end );\n\n 193 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list that is a copy of src but with the slice from start to end removed.\n• list src – source\n• integer start – start index\n• integer end – end index\nstart & end support negative indexes.\nWhile the function result is different than src, src is not modified, remember to use or store the result of this function.\nThe opposite function would be llListInsertList.\n"
    },
    "llNavigateTo": {
        "prefix": "llNavigateTo",
        "body": [
           "llNavigateTo(${name:pos}, ${[2|,FORCE_DIRECT_PATH|]});$0"
        ],
        "description": "llNavigateTo( vector pos, list options );\n\n ? Function ID\n  Forced Delay\n  Energy\n\nDirects an object to travel to a defined position in the region or adjacent regions.\n• vector pos – position in region coordinates for the character to navigate to.\n• list options – List of parameters to control the type of pathfinding used.\nAdjacent regions can be reached by extending the position vector into the nearby region.\n"
    },
    "llScriptProfiler": {
        "prefix": "llScriptProfiler",
        "body": [
           "llScriptProfiler(${1|PROFILE_NONE,PROFILE_SCRIPT_MEMORY|});$0"
        ],
        "description": "llScriptProfiler( integer flags );\n\n ??? Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nEnables or disables the scripts profiling state.\n• integer flags – PROFILE_* flags\n"
    },
    "llGetPermissionsKey": {
        "prefix": "llGetPermissionsKey",
        "body": [
           "llGetPermissionsKey($0)"
        ],
        "description": "key llGetPermissionsKey( );\n\n 137 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns the avatar (a key) of the avatar that last granted or declined permissions to the script.Returns NULL_KEY if permissions were neither granted nor declined (e.g., the permissions dialog was cancelled or otherwise ignored).\n"
    },
    "llScriptDanger": {
        "prefix": "llScriptDanger",
        "body": [
           "llScriptDanger(${name:pos}$0)"
        ],
        "description": "integer llScriptDanger( vector pos );\n\n 246 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a boolean (an integer) that is TRUE if pos is over public land, sandbox land, land that doesn't allow everyone to edit and build, or land that doesn't allow outside scripts.\n• vector pos – position in region coordinates\nThe usefulness of this function is limited as it does not give the reason why the script would be in danger. llGetParcelFlags on the other hand can be used in much the same way and gives more detailed information.\n"
    },
    "llSetCameraAtOffset": {
        "prefix": "llSetCameraAtOffset",
        "body": [
           "llSetCameraAtOffset(${name:offset});$0"
        ],
        "description": "llSetCameraAtOffset( vector offset );\n\n 244 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the point the camera is looking at to offset for avatars that sit on the object.\n• vector offset – offset relative to the prim's position and expressed in local coordinates\nThis is the point the camera looks at, not the position of the camera's eye.\n"
    },
    "llSetClickAction": {
        "prefix": "llSetClickAction",
        "body": [
           "llSetClickAction(${1|CLICK_ACTION_NONE,CLICK_ACTION_TOUCH,CLICK_ACTION_SIT,CLICK_ACTION_BUY,CLICK_ACTION_PAY,CLICK_ACTION_OPEN,CLICK_ACTION_PLAY,CLICK_ACTION_OPEN_MEDIA,CLICK_ACTION_ZOOM,CLICK_ACTION_DISABLED|});$0"
        ],
        "description": "llSetClickAction( integer action );\n\n 333 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the action performed when a prim is clicked upon (aka click action).\n• integer action – CLICK_ACTION_* flag\nWhen the cursor hovers over the prim, its image changes to reflect the action.\n"
    },
    "llGetPermissions": {
        "prefix": "llGetPermissions",
        "body": [
           "llGetPermissions($0)"
        ],
        "description": "integer llGetPermissions( );\n\n 138 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns an integer bitfield with the script permissions granted"
    },
    "llSitTarget": {
        "prefix": "llSitTarget",
        "body": [
           "llSitTarget(${name:offset}, ${name:rot});$0"
        ],
        "description": "llSitTarget( vector offset, rotation rot );\n\n 238 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSet the sit location for the prim. The sit location is relative to the prim's position and rotation.\n• vector offset – Additional position for the sit target in local prim coordinates.\n• rotation rot – Additional rotation for the sit target relative to the prim rotation.\nIf offset == <0.0, 0.0, 0.0> then the sit target is removed.\n"
    },
    "llSetCameraParams": {
        "prefix": "llSetCameraParams",
        "body": [
           "llSetCameraParams([CAMERA_ACTIVE,${1|TRUE,FALSE|}${2|\\,CAMERA_BEHINDNESS_ANGLE\\, float degrees,\\,CAMERA_BEHINDNESS_LAG\\, float seconds,\\,CAMERA_DISTANCE\\, float meters,\\,CAMERA_FOCUS\\, vector position,\\,CAMERA_FOCUS_LAG\\, float seconds,\\,CAMERA_FOCUS_LOCKED\\, integer isLocked,\\,CAMERA_FOCUS_OFFSET\\, vector meters,\\,CAMERA_FOCUS_THRESHOLD\\, float meters,\\,CAMERA_PITCH\\, float degrees,\\,CAMERA_POSITION\\, vector position,\\,CAMERA_POSITION_LAG\\, float seconds,\\,CAMERA_POSITION_LOCKED\\, integer isLocked\\,CAMERA_POSITION_THRESHOLD\\, float meters|}]);$0"
        ],
        "description": "llSetCameraParams( list rules );\n\n 313 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets multiple camera parameters at once.\n• list rules – Format is [ rule1, data1, rule2, data2 . . . rulen, datan ]To run this function the script must request the PERMISSION_CONTROL_CAMERA permission with llRequestPermissions."
    },
    "llGroundRepel": {
        "prefix": "llGroundRepel",
        "body": [
           "llGroundRepel(${name:height}, ${2|TRUE,FALSE|}, ${name:tau});$0"
        ],
        "description": "llGroundRepel( float height, integer water, float tau );\n\n 230 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nCritically damps to height if within height * 0.5 of ground or water level (which ever is higher)\n• float height – Distance above the ground\n• integer water – boolean, if TRUE then hover above water too.\n• float tau – seconds to critically damp in\nDo not use with vehicles.\n"
    },
    "llParseStringKeepNulls": {
        "prefix": "llParseStringKeepNulls",
        "body": [
           "llParseStringKeepNulls(${name:src}, ${name:separators}, ${name:spacers}$0)"
        ],
        "description": "list llParseStringKeepNulls( string src, list separators, list spacers );\n\n 285 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a list that is src broken into a list, discarding separators, keeping spacers, keeping any null values generated.\n• string src – source string\n• list separators – separators to be discarded\n• list spacers – spacers to be kept\n"
    },
    "llGetInventoryKey": {
        "prefix": "llGetInventoryKey",
        "body": [
           "llGetInventoryKey(${name:name}$0)"
        ],
        "description": "key llGetInventoryKey( string name );\n\n 175 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a key that is the UUID of the inventory name\n• string name – an item in the inventory of the prim this script is in\nIf name is not copy, mod, trans then the return is NULL_KEY.Use llGetInventoryType instead of this function to verify the existence of inventory.\n"
    },
    "llGetParcelFlags": {
        "prefix": "llGetParcelFlags",
        "body": [
           "llGetParcelFlags(${name:pos}$0)"
        ],
        "description": "integer llGetParcelFlags( vector pos );\n\n 317 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a bit field (an integer) of parcel flags (PARCEL_FLAG_*) for the parcel that includes the point pos.\n• vector pos – position in region coordinates (z component is ignored)\nBoth x and y components of pos are clamped to the range [0.0, 256.0], the z component is ignored.\n"
    },
    "llStopPointAt": {
        "prefix": "llStopPointAt",
        "body": [
           "llStopPointAt();$0"
        ],
        "description": "llStopPointAt( );\n\n 132 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nStop agent that owns object pointing"
    },
    "llSetBuoyancy": {
        "prefix": "llSetBuoyancy",
        "body": [
           "llSetBuoyancy(${name:buoyancy});$0"
        ],
        "description": "llSetBuoyancy( float buoyancy );\n\n 122 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nSets the buoyancy of the task or object. Requires physics to be enabled.\n• float buoyancy\nA buoyancy value of 0.0 disables the effectwhen buoyancy is < 1.0, the object sinks when buoyancy equals 1.0 it floats when buoyancy is > 1.0 the object rises\n"
    },
    "llStopLookAt": {
        "prefix": "llStopLookAt",
        "body": [
           "llStopLookAt();$0"
        ],
        "description": "llStopLookAt( );\n\n 106 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nStop causing object to point at a targetUse in conjunction llLookAt or llRotLookAt.\n"
    },
    "llRotTarget": {
        "prefix": "llRotTarget",
        "body": [
           "llRotTarget(${name:rot}, ${name:error}$0)"
        ],
        "description": "integer llRotTarget( rotation rot, float error );\n\n 68 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nThis function is to have the script know when it has reached a rotation.It registers a rot with a error that triggers at_rot_target and not_at_rot_target events continuously until unregistered.Returns a handle (an integer) to unregister the target with llRotTargetRemove\n• rotation rot – target rotation\n• float error – angle in radians, defines when rot has been reached\nA similar function exists for positions: llTargetThis function does not rotate the object, to do that use llSetRot, llRotLookAt or llLookAt.\n"
    },
    "llRot2Up": {
        "prefix": "llRot2Up",
        "body": [
           "llRot2Up(${name:q}$0)"
        ],
        "description": "vector llRot2Up( rotation q );\n\n 20 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nComputes the orientation of the local z-axis relative to the parent (i.e. the root prim or the world).Returns a vector that is the up vector defined by q, i.e. a unit vector pointing in the positive Z direction\n• rotation q\n"
    },
    "llSetLinkMedia": {
        "prefix": "llSetLinkMedia",
        "body": [
           "llSetLinkMedia(${1|integer link,LINK_ROOT,LINK_THIS|}, ${2|integer face,ALL_SIDES|}, ${name:params}$0)"
        ],
        "description": "integer llSetLinkMedia( integer link, integer face, list params );\n\n ? Function ID\n 0.0 Forced Delay\n 0.0 Energy\n\nSet the media params for a particular face on the linked prim(s) without a delay.Returns a status (an integer) that is a STATUS_* flag which details the success/failure of the operation(s).\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag \n• integer face – face number\n• list params – a set of name/value pairs (in no particular order)\n"
    },
    "llSetLinkTextureAnim": {
        "prefix": "llSetLinkTextureAnim",
        "body": [
           "llSetLinkTextureAnim(${1|LINK_ROOT,LINK_SET,LINK_ALL_OTHERS,LINK_ALL_CHILDREN,LINK_THIS|}, ${2|ANIM_ON,LOOP,REVERSE,PING_PONG,SMOOTH,ROTATE,SCALE|}, ${3|integer face,ALL_SIDES|}, ${name:sizex}, ${name:sizey}, ${name:start}, ${name:length}, ${name:rate});$0"
        ],
        "description": "llSetLinkTextureAnim( integer link, integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate );\n\n 356 Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nAnimate the texture on the specified face/faces of the specified prim/prims by setting the texture scale and offset. Identical to llSetTextureAnim except able to modify any prim in the link set.\n• integer link – Link number (0: unlinked, 1: root prim, >1: child prims and seated avatars) or a LINK_* flag to effect\n• integer mode – bit field of Mode flags\n• integer face – face number or ALL_SIDES\n• integer sizex – horizontal frames (ignored for ROTATE and SCALE)\n• integer sizey – vertical frames (ignored for ROTATE and SCALE)\n• float start – Start position/frame number (or radians for ROTATE)\n• float length – number of frames to display (or radians for ROTATE)\n• float rate – frames per second (must not be zero)\nIf face is ALL_SIDES then the function works on all sides.\nstart supports negative indexes.\nFrames are numbered from left to right, top to bottom, starting at 0.If rate is negative, it has the same effect as using the REVERSE flag.\n"
    },
    "llHash": {
        "prefix": "llHash",
        "body": [
           "llHash(${name:val}$0)"
        ],
        "description": "integer llHash( string val );\n\n  Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nReturns a 32bit hash for the provided string. Returns 0 if the input string is empty.\n• string val - String to hash.\n"
    },
    "llChar": {
        "prefix": "llChar",
        "body": [
           "llChar(${name:val}$0)"
        ],
        "description": "string llChar( string val );\n\n  Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nConstruct a single character string from the supplied Unicode value.\n• integer val - Unicode value for character.\nThis function returns a single character string generated from the character at the indicated UTF-32 codepoint. Returns\"?\" (Unicode 0x0F) if val is negative.\n"
    },
    "llOrd": {
        "prefix": "llOrd",
        "body": [
           "llOrd(${name:val},${name:index}$0)"
        ],
        "description": "integer llOrd( string val, integer index );\n\n  Function ID\n 0.0 Forced Delay\n 10.0 Energy\n\nCalculate the ordinal value for a character in a string.\n• string val – Source string for character ordinal.\n• integer index – Index of character ordinal to retrieve.\nThis function returns a single character string generated from the character at the indicated UTF-32 codepoint. Returns\"?\" (Unicode 0x0F) if val is negative.\n"
    },
    "llsRGB2Linear": {
        "prefix": "llsRGB2Linear",
        "body": [
           "llsRGB2Linear(${name:srgb}$0)"
        ],
        "description": "vector llsRGB2Linear( vector srgb );\n\n  Function ID\n Forced Delay\n Energy\n\nCalculate the ordinal value for a character in a string.Returns a vector Transforms a color specified in the sRGB colorspace to the linear RGB colorspace.\n• vector srgb – Color in the sRGB color space.\n"
    },
    "llLinear2sRGB": {
        "prefix": "llLinear2sRGB",
        "body": [
           "llLinear2sRGB(${name:color}$0)"
        ],
        "description": "vector llLinear2sRGB( vector color );\n\n  Function ID\n Forced Delay\n Energy\n\nReturns a vector Transforms a color specified in linear RGB colorspace into the sRGB colorspace.\n• vector color – Color in the linear color space.\n"
    },
    "llTargetedEmail": {
        "prefix": "llTargetedEmail",
        "body": [
           "llTargetedEmail(${name:target}, ${name:subject}, ${name:message});$0"
        ],
        "description": "llTargetedEmail( integer target, string subject, string message );\n\n119 Function ID\n20.0 Forced Delay\n10.0 Energy\n\nSends an email to the owner or creator (selected by target) of an object with subject and message.\n• integer target\n• string subject\n• string message\nThe entire message (including the address, subject and other miscellaneous fields) can't be longer than 4096 bytes combined.\n"
    },
    "llLinksetDataAvailable": {
        "prefix": "llLinksetDataAvailable",
        "body": [
           "llLinksetDataAvailable();$0"
        ],
        "description": "The llLinksetDataAvailable returns the number of bytes available in the linkset's datastore.\nReturns an integer number of bytes available in the linkset store."
    },
    "llLinksetDataCountKeys": {
        "prefix": "llLinksetDataCountKeys",
        "body": [
           "llLinksetDataCountKeys();$0"
        ],
        "description": "The llLinksetDataCountKeys returns the number of unique keys that have been stored in the linkset's datastore.\nReturns an integer number of keys used in the linkset store."
    },
    "llLinksetDataDelete": {
        "prefix": "llLinksetDataDelete",
        "body": [
           "llLinksetDataDelete(${name:name});$0"
        ],
        "description": "The llLinksetDataDelete and llLinksetDataDeleteProtected functions erases a name:value pair from the linkset's datastore. \n When this function successfully removes a name:value pair a linkset_data event is triggered in all scripts running in the linkset with an action of LINKSETDATA_DELETE and the name parameter set to the name that was removed.\n The value parameter in the event is set to an empty string."
    },
    "llLinksetDataDeleteProtected": {
        "prefix": "llLinksetDataDeleteProtected",
        "body": [
           "llLinksetDataDeleteProtected(${name:name, ${name:pass});$0"
        ],
        "description": "The llLinksetDataDeleteProtected function erases a protected name:value pair from the linkset's datastore.\nReturns an integer success or failure code. \n string name The key of the linkset name:value pair to be deleted.The key of the linkset name:value pair to be deleted. \n string pass A pass phrase previously used to protect the name:value pair."
    },
    "llLinksetDataFindKeys": {
        "prefix": "llLinksetDataFindKeys",
        "body": [
           "llLinksetDataFindKeys(${name:pattern}, ${name:start}, ${name:count});$0"
        ],
        "description": "list llLinksetDataFindKeys( string pattern, integer start, integer count ); \n\n The llLinksetDataListKeys function returns a list of up to count keys from the datastore that match pattern, starting at the one indicated by start.\nIf count is less than 1, then all keys between start and the end which match pattern are returned.\nReturns a list of the keys in the datastore.\n string pattern A regular expression describing which keys to return. \ninteger start The first key to return. \ninteger count The number of keys to return. \npattern is a Regular expression"
    },
    "llLinksetDataListKeys": {
        "prefix": "llLinksetDataListKeys",
        "body": [
           "llLinksetDataListKeys(${name:start}, ${name:count});$0"
        ],
        "description": "list llLinksetDataListKeys( integer start, integer count ); \n\n The llLinksetDataListKeys function returns a list of up to count keys in the datastore, starting at the one indicated by start. If count is less than 1, then all keys between start and the end are returned. Returns a list of the keys in the datastore. \n integer start The first key to return. \n integer count The number of keys to return."
    },
    "llLinksetDataRead": {
        "prefix": "llLinksetDataRead",
        "body": [
           "llLinksetDataRead(${name:start});$0"
        ],
        "description": "list llLinksetDataRead( string start ) The llLinksetDataRead and llLinksetDataReadProtected functions return the value in the linkset's datastore for the provided name. \nIf name is not found, these functions return an empty string. Reads an unprotected name:value pair from the linkset's datastore.\nReturns a string value corresponding to name\n string name – The key of the linkset name:value pair to be read. \nIf the name is missing, or the name:value pair was created with llLinksetDataWriteProtected this function returns an empty string. "
    },
    "llLinksetDataReadProtected": {
        "prefix": "llLinksetDataReadProtected",
        "body": [
           "llLinksetDataReadProtected(${name:start}, ${name:pass});$0"
        ],
        "description": "list llLinksetDataReadProtected(string start, string pass); The llLinksetDataReadProtected and llLinksetDataReadProtected functions return the value in the linkset's datastore for the provided name. \nIf name is not found, these functions return an empty string. Reads a protected name:value pair from the datastore. \nReturns a string value corresponding to name\n string name – The key of the linkset name:value pair to be read.The key of the name:value pair to be read. \n string pass The pass phrase protecting the name:value pair. \n If the pass parameter does not match, this function returns an empty string. "
    },
    "llLinksetDataReset": {
        "prefix": "llLinksetDataReset",
        "body": [
           "llLinksetDataReset();$0"
        ],
        "description": "llLinksetDataReset( ); \n\n The llLinksetDataReset function erases all name:value pairs from the linkset's datastore. \n When this function successfully removes all name:value pairs a linkset_data event is triggered in all scripts running in the linkset with an action of LINKSETDATA_RESET and the name parameter set to an empty string. \n The value parameter in the event is set to an empty string."
    },
    "llLinksetDataWrite": {
        "prefix": "llLinksetDataWrite",
        "body": [
           "llLinksetDataWrite(${name:name}, ${name:value});$0"
        ],
        "description": "integer llLinksetDataWrite( string name, string value ); \n\n The llLinksetDataWrite and llLinksetDataWriteProtected functions create or update a name:value pair in the linkset datastore. If value is an empty string, the pair is deleted. \nThis function returns 0 on success or an error code on failure. \nWhen these function are called the linkset_data event is triggered in all scripts running in the linkset with an action of LINKSETDATA_UPDATE, or LINKSETDATA_DELETE if the pair is deleted. \nThe linkset datastore can contain up to 64k of data. Every pair written to the datastore consumes a number of bytes in the datastore equal to the length of name plus the length of value. \n Creates or updates an unprotected name:value pair from the linkset's datastore. \n Returns an integer success or failure code. \n string name – The key of the name:value pair in the datastore to be updated or created.\n string value - The value of the name:value pair. "
    },
    "llLinksetDataWriteProtected": {
        "prefix": "llLinksetDataWriteProtected",
        "body": [
           "llLinksetDataWriteProtected(${name:name}, ${name:value}, ${name:pass});$0"
        ],
        "description": "integer llLinksetDataWriteProtected( string name, string value, string pass ); \n\n Creates or updates an protected name:value pair from the linkset's datastore. Further attempts to read, write or update the name:value pair must use the protected versions of those functions and must supply the same string that was used in pass.\nReturns an integer success or failure code.\n string name – The key of the name:value pair in the datastore to be updated or created. The key of the name:value pair in the datastore to be updated or created. \n string value - The value of the name:value pair.The value of the name:value pair. \n string pass - A pass phrase used to protect the name:value pair. \nCaveats \n Protecting a name:value pair adds an additional 32 bytes to its size in the datastore. \n When writing a protected name, the linkset_data event fires as normal, however the value parameter will be an empty string. \n LINKSETDATA_OK - 0 - The name:value pair was written to the datastore. \n LINKSETDATA_EMEMORY - 1 - A name:value pair was too large to write to the linkset datastore. \n LINKSETDATA_ENOKEY 2 The name supplied to llLinksetDataWrite was empty. \n LINKSETDATA_EPROTECTED - 3 - The name:value pair has been protected from overwrite in the linkset's datastore. \n LINKSETDATA_NOTFOUND - 4 - The named key could not be found in the linkset's datastore when attempting to delete it. \n LINKSETDATA_NOUPDATE - 5 - The name:value stored in the linkset was not changed by the write operation because the value stored matches the value written. \n\n Events are only fired if the linkset's datastore is changed. \n Rewriting an existing value to a name:value pair returns LINKSETDATA_NOUPDATE. \n Writing an empty string to a nonexistent name in the datastore returns LINKSETDATA_NOTFOUND."
    }
}